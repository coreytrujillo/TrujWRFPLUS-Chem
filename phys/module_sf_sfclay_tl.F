!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
!WRF:MODEL_LAYER:PHYSICS
!
MODULE G_MODULE_SF_SFCLAY

  USE module_sf_sfclay, ONLY: psimtb,psihtb

  IMPLICIT NONE
!-------------------------------------------------------------------          
  REAL, PARAMETER :: vconvc=1.
  REAL, PARAMETER :: czo=0.0185
  REAL, PARAMETER :: ozo=1.59e-5
!  REAL, DIMENSION(0:1000), SAVE :: psimtb, psihtb

CONTAINS
!  Differentiation of sfclay in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: wspd ust cpm hfx br qsfc psih
!                ustm znt psim rmol flqc qfx chs gz1oz0 zol flhc
!                mol
!   with respect to varying inputs: p3d wspd ust u3d cpm pblh hfx
!                br t3d qsfc qv3d psih ustm znt psfc psim rmol
!                flqc qfx chs gz1oz0 v3d zol flhc dz8w mol
!-------------------------------------------------------------------
  SUBROUTINE G_SFCLAY(u3d, g_u3d, v3d, g_v3d, t3d, g_t3d, qv3d, g_qv3d, &
&    p3d, g_p3d, dz8w, g_dz8w, cp, g, rovcp, r, xlv, psfc, g_psfc, chs, &
&    g_chs, chs2, cqs2, cpm, g_cpm, znt, g_znt, ust, g_ust, pblh, g_pblh&
&    , mavail, zol, g_zol, mol, g_mol, regime, psim, g_psim, psih, g_psih&
&    , fm, fh, xland, hfx, g_hfx, qfx, g_qfx, lh, tsk, flhc, g_flhc, flqc&
&    , g_flqc, qgh, qsfc, g_qsfc, rmol, g_rmol, u10, v10, th2, t2, q2, &
&    gz1oz0, g_gz1oz0, wspd, g_wspd, br, g_br, isfflx, dx, svp1, svp2, &
&    svp3, svpt0, ep1, ep2, karman, eomeg, stbolt, p1000mb, ids, ide, jds&
&    , jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, &
&    kts, kte, ustm, g_ustm, ck, cka, cd, cda, isftcflx, iz0tlnd, &
&    scm_force_flux)
    IMPLICIT NONE
!-------------------------------------------------------------------
!-- U3D         3D u-velocity interpolated to theta points (m/s)
!-- V3D         3D v-velocity interpolated to theta points (m/s)
!-- T3D         temperature (K)
!-- QV3D        3D water vapor mixing ratio (Kg/Kg)
!-- P3D         3D pressure (Pa)
!-- dz8w        dz between full levels (m)
!-- CP          heat capacity at constant pressure for dry air (J/kg/K)
!-- G           acceleration due to gravity (m/s^2)
!-- ROVCP       R/CP
!-- R           gas constant for dry air (J/kg/K)
!-- XLV         latent heat of vaporization for water (J/kg)
!-- PSFC        surface pressure (Pa)
!-- ZNT         roughness length (m)
!-- UST         u* in similarity theory (m/s)
!-- USTM        u* in similarity theory (m/s) without vconv correction
!               used to couple with TKE scheme
!-- PBLH        PBL height from previous time (m)
!-- MAVAIL      surface moisture availability (between 0 and 1)
!-- ZOL         z/L height over Monin-Obukhov length
!-- MOL         T* (similarity theory) (K)
!-- REGIME      flag indicating PBL regime (stable, unstable, etc.)
!-- PSIM        similarity stability function for momentum
!-- PSIH        similarity stability function for heat
!-- FM          integrated stability function for momentum
!-- FH          integrated stability function for heat
!-- XLAND       land mask (1 for land, 2 for water)
!-- HFX         upward heat flux at the surface (W/m^2)
!-- QFX         upward moisture flux at the surface (kg/m^2/s)
!-- LH          net upward latent heat flux at surface (W/m^2)
!-- TSK         surface temperature (K)
!-- FLHC        exchange coefficient for heat (W/m^2/K)
!-- FLQC        exchange coefficient for moisture (kg/m^2/s)
!-- CHS         heat/moisture exchange coefficient for LSM (m/s)
!-- QGH         lowest-level saturated mixing ratio
!-- QSFC        ground saturated mixing ratio
!-- U10         diagnostic 10m u wind
!-- V10         diagnostic 10m v wind
!-- TH2         diagnostic 2m theta (K)
!-- T2          diagnostic 2m temperature (K)
!-- Q2          diagnostic 2m mixing ratio (kg/kg)
!-- GZ1OZ0      log(z/z0) where z0 is roughness length
!-- WSPD        wind speed at lowest model level (m/s)
!-- BR          bulk Richardson number in surface layer
!-- ISFFLX      isfflx=1 for surface heat and moisture fluxes
!-- DX          horizontal grid size (m)
!-- SVP1        constant for saturation vapor pressure (kPa)
!-- SVP2        constant for saturation vapor pressure (dimensionless)
!-- SVP3        constant for saturation vapor pressure (K)
!-- SVPT0       constant for saturation vapor pressure (K)
!-- EP1         constant for virtual temperature (R_v/R_d - 1) (dimensionless)
!-- EP2         constant for specific humidity calculation 
!               (R_d/R_v) (dimensionless)
!-- KARMAN      Von Karman constant
!-- EOMEG       angular velocity of earth's rotation (rad/s)
!-- STBOLT      Stefan-Boltzmann constant (W/m^2/K^4)
!-- ck          enthalpy exchange coeff at 10 meters
!-- cd          momentum exchange coeff at 10 meters
!-- cka         enthalpy exchange coeff at the lowest model level
!-- cda         momentum exchange coeff at the lowest model level
!-- isftcflx    =0, (Charnock and Carlson-Boland); =1, AHW Ck, Cd, =2 Garratt
!-- iz0tlnd     =0 Carlson-Boland, =1 Czil_new
!-- ids         start index for i in domain
!-- ide         end index for i in domain
!-- jds         start index for j in domain
!-- jde         end index for j in domain
!-- kds         start index for k in domain
!-- kde         end index for k in domain
!-- ims         start index for i in memory
!-- ime         end index for i in memory
!-- jms         start index for j in memory
!-- jme         end index for j in memory
!-- kms         start index for k in memory
!-- kme         end index for k in memory
!-- its         start index for i in tile
!-- ite         end index for i in tile
!-- jts         start index for j in tile
!-- jte         end index for j in tile
!-- kts         start index for k in tile
!-- kte         end index for k in tile
!-------------------------------------------------------------------
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte
!                                                               
    INTEGER, INTENT(IN) :: isfflx
    REAL, INTENT(IN) :: svp1, svp2, svp3, svpt0
    REAL, INTENT(IN) :: ep1, ep2, karman, eomeg, stbolt
    REAL, INTENT(IN) :: p1000mb
!
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: dz8w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_dz8w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: qv3d, p3d&
&    , t3d
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_qv3d, &
&    g_p3d, g_t3d
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: mavail, pblh, xland&
&    , tsk
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: g_pblh
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(OUT) :: u10, v10, th2, t2&
&    , q2, qsfc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(OUT) :: g_qsfc
!
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: regime, hfx, qfx&
&    , lh, mol, rmol
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_hfx, g_qfx, &
&    g_mol, g_rmol
!m the following 5 are change to memory size
!
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: gz1oz0, wspd, br&
&    , psim, psih, fm, fh
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_gz1oz0, g_wspd&
&    , g_br, g_psim, g_psih
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: u3d, v3d
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_u3d, &
&    g_v3d
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: psfc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: g_psfc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: znt, zol, ust, &
&    cpm, chs2, cqs2, chs
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_znt, g_zol, &
&    g_ust, g_cpm, g_chs
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: flhc, flqc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_flhc, g_flqc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: qgh
    REAL, INTENT(IN) :: cp, g, rovcp, r, xlv, dx
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(OUT) :: ck, cka&
&    , cd, cda, ustm
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(OUT) :: g_ustm
    INTEGER, OPTIONAL, INTENT(IN) :: isftcflx, iz0tlnd
    INTEGER, OPTIONAL, INTENT(IN) :: scm_force_flux
! LOCAL VARS
    REAL, DIMENSION(its:ite) :: u1d, v1d, qv1d, p1d, t1d
    REAL, DIMENSION(its:ite) :: g_u1d, g_v1d, g_qv1d, g_p1d, g_t1d
    REAL, DIMENSION(its:ite) :: dz8w1d
    REAL, DIMENSION(its:ite) :: g_dz8w1d
    INTEGER :: i, j
    g_qv1d = 0.0_8
    g_v1d = 0.0_8
    g_dz8w1d = 0.0_8
    g_p1d = 0.0_8
    g_u1d = 0.0_8
    g_t1d = 0.0_8
    DO j=jts,jte
      DO i=its,ite
        g_dz8w1d(i) = g_dz8w(i, 1, j)
        dz8w1d(i) = dz8w(i, 1, j)
      END DO
      DO i=its,ite
        g_u1d(i) = g_u3d(i, 1, j)
        u1d(i) = u3d(i, 1, j)
        g_v1d(i) = g_v3d(i, 1, j)
        v1d(i) = v3d(i, 1, j)
        g_qv1d(i) = g_qv3d(i, 1, j)
        qv1d(i) = qv3d(i, 1, j)
        g_p1d(i) = g_p3d(i, 1, j)
        p1d(i) = p3d(i, 1, j)
        g_t1d(i) = g_t3d(i, 1, j)
        t1d(i) = t3d(i, 1, j)
      END DO
!  Sending array starting locations of optional variables may cause
!  troubles, so we explicitly change the call.
      CALL G_SFCLAY1D(j, u1d, g_u1d, v1d, g_v1d, t1d, g_t1d, qv1d, &
&                g_qv1d, p1d, g_p1d, dz8w1d, g_dz8w1d, cp, g, rovcp, r, &
&                xlv, psfc(ims, j), g_psfc(ims, j), chs(ims, j), g_chs(ims, j), &
&                chs2(ims, j), cqs2(ims, j), cpm(ims, j), g_cpm(ims, j), pblh(ims, &
&                j), g_pblh(ims, j), rmol(ims, j), g_rmol(ims, j), znt(ims, j), &
&                g_znt(ims, j), ust(ims, j), g_ust(ims, j), mavail(ims, j), zol(ims&
&                , j), g_zol(ims, j), mol(ims, j), g_mol(ims, j), regime(ims, j)&
&                , psim(ims, j), g_psim(ims, j), psih(ims, j), g_psih(ims, j), fm&
&                (ims, j), fh(ims, j), xland(ims, j), hfx(ims, j), g_hfx(ims, j), &
&                qfx(ims, j), g_qfx(ims, j), tsk(ims, j), u10(ims, j), v10(ims, j)&
&                , th2(ims, j), t2(ims, j), q2(ims, j), flhc(ims, j), g_flhc(ims, j&
&                ), flqc(ims, j), g_flqc(ims, j), qgh(ims, j), qsfc(ims, j), &
&                g_qsfc(ims, j), lh(ims, j), gz1oz0(ims, j), g_gz1oz0(ims, j), &
&                wspd(ims, j), g_wspd(ims, j), br(ims, j), g_br(ims, j), isfflx, &
&                dx, svp1, svp2, svp3, svpt0, ep1, ep2, karman, eomeg, &
&                stbolt, p1000mb, ids, ide, jds, jde, kds, kde, ims, ime&
&                , jms, jme, kms, kme, its, ite, jts, jte, kts, kte, &
&                isftcflx, iz0tlnd, scm_force_flux, ustm(ims, j), g_ustm(ims&
&                , j), ck(ims, j), cka(ims, j), cd(ims, j), cda(ims, j))
    END DO
  END SUBROUTINE G_SFCLAY
!-------------------------------------------------------------------

!  Differentiation of sfclay1d in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: wspd ust cpm hfx br qsfc psih
!                ustm znt psim flqc rmol qfx chs gz1oz0 zol flhc
!                mol
!   with respect to varying inputs: qv1d wspd ust cpm psfcpa pblh
!                hfx dz8w1d ux p1d br qsfc psih ustm znt psim flqc
!                rmol qfx chs vx gz1oz0 zol flhc t1d mol
!-------------------------------------------------------------------
  SUBROUTINE G_SFCLAY1D(j, ux, g_ux, vx, g_vx, t1d, g_t1d, qv1d, g_qv1d&
&    , p1d, g_p1d, dz8w1d, g_dz8w1d, cp, g, rovcp, r, xlv, psfcpa, &
&    g_psfcpa, chs, g_chs, chs2, cqs2, cpm, g_cpm, pblh, g_pblh, rmol, &
&    g_rmol, znt, g_znt, ust, g_ust, mavail, zol, g_zol, mol, g_mol, &
&    regime, psim, g_psim, psih, g_psih, fm, fh, xland, hfx, g_hfx, qfx, &
&    g_qfx, tsk, u10, v10, th2, t2, q2, flhc, g_flhc, flqc, g_flqc, qgh, &
&    qsfc, g_qsfc, lh, gz1oz0, g_gz1oz0, wspd, g_wspd, br, g_br, isfflx, &
&    dx, svp1, svp2, svp3, svpt0, ep1, ep2, karman, eomeg, stbolt, &
&    p1000mb, ids, ide, jds, jde, kds, kde, ims, ime, jms, jme, kms, kme&
&    , its, ite, jts, jte, kts, kte, isftcflx, iz0tlnd, scm_force_flux, &
&    ustm, g_ustm, ck, cka, cd, cda)
    IMPLICIT NONE
                                                                                
!-------------------------------------------------------------------
    REAL, PARAMETER :: xka=2.4e-5
    REAL, PARAMETER :: prt=1.
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte, j
!                                                               
    INTEGER, INTENT(IN) :: isfflx
    REAL, INTENT(IN) :: svp1, svp2, svp3, svpt0
    REAL, INTENT(IN) :: ep1, ep2, karman, eomeg, stbolt
    REAL, INTENT(IN) :: p1000mb
!
    REAL, DIMENSION(ims:ime), INTENT(IN) :: mavail, pblh, xland, tsk
    REAL, DIMENSION(ims:ime), INTENT(IN) :: g_pblh
!
    REAL, DIMENSION(ims:ime), INTENT(IN) :: psfcpa
    REAL, DIMENSION(ims:ime), INTENT(IN) :: g_psfcpa
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: regime, hfx, qfx, mol, &
&    rmol
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_hfx, g_qfx, g_mol, &
&    g_rmol
!m the following 5 are changed to memory size---
!
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: gz1oz0, wspd, br, psim, &
&    psih, fm, fh
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_gz1oz0, g_wspd, g_br, &
&    g_psim, g_psih
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: znt, zol, ust, cpm, chs2&
&    , cqs2, chs
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_znt, g_zol, g_ust, &
&    g_cpm, g_chs
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: flhc, flqc
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_flhc, g_flqc
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: qgh
    REAL, DIMENSION(ims:ime), INTENT(OUT) :: u10, v10, th2, t2, q2, qsfc&
&    , lh
    REAL, DIMENSION(ims:ime), INTENT(OUT) :: g_qsfc
    REAL, INTENT(IN) :: cp, g, rovcp, r, xlv, dx
! MODULE-LOCAL VARIABLES, DEFINED IN SUBROUTINE SFCLAY
    REAL, DIMENSION(its:ite), INTENT(IN) :: dz8w1d
    REAL, DIMENSION(its:ite), INTENT(IN) :: g_dz8w1d
    REAL, DIMENSION(its:ite), INTENT(IN) :: ux, vx, qv1d, p1d, t1d
    REAL, DIMENSION(its:ite), INTENT(IN) :: g_ux, g_vx, g_qv1d, g_p1d, &
&    g_t1d
    REAL, DIMENSION(ims:ime), OPTIONAL, INTENT(OUT) :: ck, cka, cd, cda&
&    , ustm
    REAL, DIMENSION(ims:ime), OPTIONAL, INTENT(OUT) :: g_ustm
    INTEGER, OPTIONAL, INTENT(IN) :: isftcflx, iz0tlnd
    INTEGER, OPTIONAL, INTENT(IN) :: scm_force_flux
! LOCAL VARS
    REAL, DIMENSION(its:ite) :: za, thvx, zqkl, zqklp1, thx, qx, psih2, &
&    psim2, psih10, psim10, denomq, denomq2, denomt2, wspdi, gz2oz0, &
&    gz10oz0
    REAL, DIMENSION(its:ite) :: g_za, g_thvx, g_zqkl, g_zqklp1, g_thx, &
&    g_qx, g_denomq, g_wspdi
!
    REAL, DIMENSION(its:ite) :: rhox, govrth, tgdsa
    REAL, DIMENSION(its:ite) :: g_rhox, g_govrth, g_tgdsa
!
    REAL, DIMENSION(its:ite) :: scr3, scr4
    REAL, DIMENSION(its:ite) :: g_scr3, g_scr4
    REAL, DIMENSION(its:ite) :: thgb, psfc
    REAL, DIMENSION(its:ite) :: g_thgb, g_psfc
!
    INTEGER :: kl
    INTEGER :: n, i, k, kk, l, nzol, nk, nzol2, nzol10
    REAL :: pl, thcon, tvcon, e1
    REAL :: g_pl, g_thcon, g_tvcon
    REAL :: zl, tskv, dthvdz, dthvm, vconv, rzol, rzol2, rzol10, zol2, &
&    zol10
    REAL :: g_zl, g_tskv, g_dthvdz, g_dthvm, g_vconv, g_rzol
    REAL :: dtg, psix, dtthx, psix10, psit, psit2, psiq, psiq2, psiq10
    REAL :: g_dtg, g_psix, g_psit, g_psiq
    REAL :: fluxc, vsgd, z0q, visc, restar, czil, restar2
    REAL :: g_fluxc, g_visc, g_restar, g_czil, g_restar2
    REAL :: zw, zn1, zn2
    REAL :: g_zw, g_zn1, g_zn2
    REAL :: pwx1
    REAL :: g_pwx1
    REAL :: pwr1
    REAL :: g_pwr1
    REAL :: pwx10
    REAL :: g_pwx10
    REAL :: arg1
    REAL :: g_arg1
    REAL :: result1
    REAL :: g_result1
    REAL :: arg10
    REAL :: result2
    REAL :: g_result2
    REAL :: pwy1
    REAL :: g_pwy1
    REAL :: pwr10
    REAL :: g_pwr10
    REAL :: g_amax10
    REAL :: x1
    REAL :: amax10
    REAL :: g_x1
    REAL :: max2
!-------------------------------------------------------------------
    kl = kte
    g_psfc = 0.0_8
    DO i=its,ite
! PSFC cb
      g_psfc(i) = g_psfcpa(i)/1000.
      psfc(i) = psfcpa(i)/1000.
    END DO
    g_thgb = 0.0_8
!                                                      
!----CONVERT GROUND TEMPERATURE TO POTENTIAL TEMPERATURE:  
!                                                            
    DO i=its,ite
      g_tgdsa(i) = 0.0_8
      tgdsa(i) = tsk(i)
! PSFC cb
!        THGB(I)=TSK(I)*(100./PSFC(I))**ROVCP                
      g_pwx1 = -(p1000mb*g_psfcpa(i)/psfcpa(i)**2)
      pwx1 = p1000mb/psfcpa(i)
      IF (pwx1 .GT. 0.0_8 .OR. (pwx1 .LT. 0.0_8 .AND. rovcp .EQ. INT(&
&          rovcp))) THEN
        g_pwr1 = rovcp*pwx1**(rovcp-1)*g_pwx1
      ELSE IF (pwx1 .EQ. 0.0_8 .AND. rovcp .EQ. 1.0) THEN
        g_pwr1 = g_pwx1
      ELSE
        g_pwr1 = 0.0_8
      END IF
      pwr1 = pwx1**rovcp
      g_thgb(i) = tsk(i)*g_pwr1
      thgb(i) = tsk(i)*pwr1
    END DO
    g_thx = 0.0_8
    g_thvx = 0.0_8
    g_scr3 = 0.0_8
    g_scr4 = 0.0_8
!                                                            
!-----DECOUPLE FLUX-FORM VARIABLES TO GIVE U,V,T,THETA,THETA-VIR.,
!     T-VIR., QV, AND QC AT CROSS POINTS AND AT KTAU-1.  
!                                                                 
!     *** NOTE ***                                           
!         THE BOUNDARY WINDS MAY NOT BE ADEQUATELY AFFECTED BY FRICTION,         
!         SO USE ONLY INTERIOR VALUES OF UX AND VX TO CALCULATE 
!         TENDENCIES.                             
!                                                           
!     DO 24 I=its,ite
!        UX(I)=U1D(I)
!        VX(I)=V1D(I)
!  24 CONTINUE                                             
!.....SCR3(I,K) STORE TEMPERATURE,                           
!     SCR4(I,K) STORE VIRTUAL TEMPERATURE.                                       
    DO i=its,ite
! PL cb
      g_pl = g_p1d(i)/1000.
      pl = p1d(i)/1000.
      g_scr3(i) = g_t1d(i)
      scr3(i) = t1d(i)
!         THCON=(100./PL)**ROVCP                                                 
      g_pwx10 = -(p1000mb*0.001*g_pl/pl**2)
      pwx10 = p1000mb*0.001/pl
      IF (pwx10 .GT. 0.0_8 .OR. (pwx10 .LT. 0.0_8 .AND. rovcp .EQ. INT(&
&          rovcp))) THEN
        g_thcon = rovcp*pwx10**(rovcp-1)*g_pwx10
      ELSE IF (pwx10 .EQ. 0.0_8 .AND. rovcp .EQ. 1.0) THEN
        g_thcon = g_pwx10
      ELSE
        g_thcon = 0.0_8
      END IF
      thcon = pwx10**rovcp
      g_thx(i) = g_scr3(i)*thcon + scr3(i)*g_thcon
      thx(i) = scr3(i)*thcon
      g_scr4(i) = g_scr3(i)
      scr4(i) = scr3(i)
      g_thvx(i) = g_thx(i)
      thvx(i) = thx(i)
      g_qx(i) = 0.0_8
      qx(i) = 0.
    END DO
!                                                                                
    DO i=its,ite
      qgh(i) = 0.
      g_flhc(i) = 0.0_8
      flhc(i) = 0.
      g_flqc(i) = 0.0_8
      flqc(i) = 0.
      g_cpm(i) = 0.0_8
      cpm(i) = cp
    END DO
    g_qx = 0.0_8
!                                                                                
!     IF(IDRY.EQ.1)GOTO 80                                                   
    DO i=its,ite
      g_qx(i) = g_qv1d(i)
      qx(i) = qv1d(i)
      g_tvcon = ep1*g_qx(i)
      tvcon = 1. + ep1*qx(i)
      g_thvx(i) = g_thx(i)*tvcon + thx(i)*g_tvcon
      thvx(i) = thx(i)*tvcon
      g_scr4(i) = g_scr3(i)*tvcon + scr3(i)*g_tvcon
      scr4(i) = scr3(i)*tvcon
    END DO
!                                                                                
    DO i=its,ite
      arg1 = svp2*(tgdsa(i)-svpt0)/(tgdsa(i)-svp3)
      e1 = svp1*EXP(arg1)
!  for land points QSFC can come from previous time step
      IF (xland(i) .GT. 1.5 .OR. qsfc(i) .LE. 0.0) THEN
        g_qsfc(i) = -(ep2*e1*g_psfc(i)/(psfc(i)-e1)**2)
        qsfc(i) = ep2*e1/(psfc(i)-e1)
      END IF
! QGH CHANGED TO USE LOWEST-LEVEL AIR TEMP CONSISTENT WITH MYJSFC CHANGE
! Q2SAT = QGH IN LSM
      arg1 = svp2*(t1d(i)-svpt0)/(t1d(i)-svp3)
      e1 = svp1*EXP(arg1)
      pl = p1d(i)/1000.
      qgh(i) = ep2*e1/(pl-e1)
      g_cpm(i) = cp*0.8*g_qx(i)
      cpm(i) = cp*(1.+0.8*qx(i))
    END DO
    g_rhox = 0.0_8
!-----COMPUTE THE HEIGHT OF FULL- AND HALF-SIGMA LEVELS ABOVE GROUND             
!     LEVEL, AND THE LAYER THICKNESSES.                                          
    DO i=its,ite
      g_zqklp1(i) = 0.0_8
      zqklp1(i) = 0.
      g_rhox(i) = (1000.*g_psfc(i)*r*scr4(i)-psfc(i)*1000.*r*g_scr4(i))/&
&        (r*scr4(i))**2
      rhox(i) = psfc(i)*1000./(r*scr4(i))
    END DO
    g_zqkl = 0.0_8
!                                                                                
    DO i=its,ite
      g_zqkl(i) = g_dz8w1d(i)
      zqkl(i) = dz8w1d(i) + zqklp1(i)
    END DO
    g_za = 0.0_8
!                                                                                
    DO i=its,ite
      g_za(i) = 0.5*g_zqkl(i)
      za(i) = 0.5*(zqkl(i)+zqklp1(i))
    END DO
    g_govrth = 0.0_8
!                                                                                
    DO i=its,ite
      g_govrth(i) = -(g*g_thx(i)/thx(i)**2)
      govrth(i) = g/thx(i)
    END DO
!-----CALCULATE BULK RICHARDSON NO. OF SURFACE LAYER, ACCORDING TO               
!     AKB(1976), EQ(12).                                                         
    DO i=its,ite
      g_gz1oz0(i) = (g_za(i)*znt(i)-za(i)*g_znt(i))/(znt(i)*za(i))
      gz1oz0(i) = ALOG(za(i)/znt(i))
      gz2oz0(i) = ALOG(2./znt(i))
      gz10oz0(i) = ALOG(10./znt(i))
      IF (xland(i) - 1.5 .GE. 0) THEN
        zl = znt(i)
      ELSE
        zl = 0.01
      END IF
      g_arg1 = g_ux(i)*ux(i) + ux(i)*g_ux(i) + g_vx(i)*vx(i) + vx(i)*&
&        g_vx(i)
      arg1 = ux(i)*ux(i) + vx(i)*vx(i)
      IF (arg1 .EQ. 0.0_8) THEN
        g_wspd(i) = 0.0_8
      ELSE
        g_wspd(i) = g_arg1/(2.0*SQRT(arg1))
      END IF
      wspd(i) = SQRT(arg1)
      g_tskv = g_thgb(i)*(1.+ep1*qsfc(i)) + thgb(i)*ep1*g_qsfc(i)
      tskv = thgb(i)*(1.+ep1*qsfc(i))
      g_dthvdz = g_thvx(i) - g_tskv
      dthvdz = thvx(i) - tskv
!  Convective velocity scale Vc and subgrid-scale velocity Vsg
!  following Beljaars (1995, QJRMS) and Mahrt and Sun (1995, MWR)
!                                ... HONG Aug. 2001
!
!       VCONV = 0.25*sqrt(g/tskv*pblh(i)*dthvm)
!      Use Beljaars over land, old MM5 (Wyngaard) formula over water
      IF (xland(i) .LT. 1.5) THEN
        g_x1 = (g_hfx(i)*rhox(i)-hfx(i)*g_rhox(i))/rhox(i)**2/cp + (ep1*&
&          (g_tskv*qfx(i)+tskv*g_qfx(i))*rhox(i)-ep1*tskv*qfx(i)*g_rhox(i&
&          ))/rhox(i)**2
        x1 = hfx(i)/rhox(i)/cp + ep1*tskv*qfx(i)/rhox(i)
        IF (x1 .LT. 0.) THEN
          fluxc = 0.D0
          g_fluxc = 0.0_8
          g_vconv = 0.0_8
        ELSE
          g_fluxc = g_x1
          fluxc = x1
          IF(pblh(i) .eq. 0. .or. fluxc .eq. 0.) THEN
             g_vconv = 0.0_8
          ELSE
            g_vconv = vconvc*.33*(g/tgdsa(i)*pblh(i)*fluxc)**(-0.67)*g*(&
&              g_pblh(i)*fluxc+pblh(i)*g_fluxc)/tgdsa(i)
          END IF
        END IF
        vconv = vconvc*(g/tgdsa(i)*pblh(i)*fluxc)**.33
      ELSE
        IF (-dthvdz .GE. 0.D0) THEN
          g_dthvm = -g_dthvdz
          dthvm = -dthvdz
        ELSE
          dthvm = 0.
          g_dthvm = 0.0_8
        END IF
        IF (dthvm .EQ. 0.0_8) THEN
          g_result1 = 0.0_8
        ELSE
          g_result1 = g_dthvm/(2.0*SQRT(dthvm))
        END IF
        result1 = SQRT(dthvm)
        g_vconv = 2.*g_result1
        vconv = 2.*result1
      END IF
      IF (dx/5000. - 1. .LT. 0.) THEN
        max2 = 0.
      ELSE
        max2 = dx/5000. - 1.
      END IF
! Mahrt and Sun low-res correction
      vsgd = 0.32*max2**.33
      g_arg1 = g_wspd(i)*wspd(i) + wspd(i)*g_wspd(i) + g_vconv*vconv + &
&        vconv*g_vconv
      arg1 = wspd(i)*wspd(i) + vconv*vconv + vsgd*vsgd
      IF (arg1 .EQ. 0.0_8) THEN
        g_wspd(i) = 0.0_8
      ELSE
        g_wspd(i) = g_arg1/(2.0*SQRT(arg1))
      END IF
      wspd(i) = SQRT(arg1)
      IF (wspd(i) .LT. 0.1) THEN
        g_wspd(i) = 0.0_8
        wspd(i) = 0.1
      ELSE
        wspd(i) = wspd(i)
      END IF
      g_br(i) = (((g_govrth(i)*dthvdz+govrth(i)*g_dthvdz)*za(i)+govrth(i&
&        )*dthvdz*g_za(i))*wspd(i)**2-govrth(i)*za(i)*dthvdz*(g_wspd(i)*&
&        wspd(i)+wspd(i)*g_wspd(i)))/(wspd(i)*wspd(i))**2
      br(i) = govrth(i)*za(i)*dthvdz/(wspd(i)*wspd(i))
!  IF PREVIOUSLY UNSTABLE, DO NOT LET INTO REGIMES 1 AND 2
      IF (mol(i) .LT. 0.) THEN
        IF (br(i) .GT. 0.0) THEN
          g_br(i) = 0.0_8
          br(i) = 0.0
        ELSE
          br(i) = br(i)
        END IF
      END IF
!jdf
      g_rmol(i) = -(karman*((g_govrth(i)*dthvdz+govrth(i)*g_dthvdz)*za(i&
&        )+govrth(i)*dthvdz*g_za(i)))
      rmol(i) = -(govrth(i)*dthvdz*za(i)*karman)
    END DO
!jdf
!                                                                                
!-----DIAGNOSE BASIC PARAMETERS FOR THE APPROPRIATED STABILITY CLASS:            
!                                                                                
!                                                                                
!     THE STABILITY CLASSES ARE DETERMINED BY BR (BULK RICHARDSON NO.)           
!     AND HOL (HEIGHT OF PBL/MONIN-OBUKHOV LENGTH).                              
!                                                                                
!     CRITERIA FOR THE CLASSES ARE AS FOLLOWS:                                   
!                                                                                
!        1. BR .GE. 0.2;                                                         
!               REPRESENTS NIGHTTIME STABLE CONDITIONS (REGIME=1),               
!                                                                                
!        2. BR .LT. 0.2 .AND. BR .GT. 0.0;                                       
!               REPRESENTS DAMPED MECHANICAL TURBULENT CONDITIONS                
!               (REGIME=2),                                                      
!                                                                                
!        3. BR .EQ. 0.0                                                          
!               REPRESENTS FORCED CONVECTION CONDITIONS (REGIME=3),              
!                                                                                
!        4. BR .LT. 0.0                                                          
!               REPRESENTS FREE CONVECTION CONDITIONS (REGIME=4).                
!                                                                                
!CCCCC                                                                           
    DO i=its,ite
!CCCCC                                                                           
!CC     REMOVE REGIME 3 DEPENDENCE ON PBL HEIGHT                                 
!CC          IF(BR(I).LT.0..AND.HOL(I,J).GT.1.5)GOTO 310                         
      IF (br(i) .LT. 0.) THEN
!                                                                                
!-----CLASS 4; FREE CONVECTION:                                                  
!                                                                                
        regime(i) = 4.
        IF (ust(i) .LT. 0.01) THEN
          g_zol(i) = g_br(i)*gz1oz0(i) + br(i)*g_gz1oz0(i)
          zol(i) = br(i)*gz1oz0(i)
        ELSE
          g_zol(i) = (karman*((g_govrth(i)*za(i)+govrth(i)*g_za(i))*mol(&
&            i)+govrth(i)*za(i)*g_mol(i))*ust(i)**2-karman*govrth(i)*za(i&
&            )*mol(i)*(g_ust(i)*ust(i)+ust(i)*g_ust(i)))/(ust(i)*ust(i))&
&            **2
          zol(i) = karman*govrth(i)*za(i)*mol(i)/(ust(i)*ust(i))
        END IF
        zol10 = 10./za(i)*zol(i)
        zol2 = 2./za(i)*zol(i)
        IF (zol(i) .GT. 0.) THEN
          g_zol(i) = 0.0_8
          zol(i) = 0.
        ELSE
          zol(i) = zol(i)
        END IF
        IF (zol(i) .LT. -9.9999) THEN
          g_zol(i) = 0.0_8
          zol(i) = -9.9999
        ELSE
          zol(i) = zol(i)
        END IF
        IF (zol10 .GT. 0.) THEN
          zol10 = 0.
        ELSE
          zol10 = zol10
        END IF
        IF (zol10 .LT. -9.9999) THEN
          zol10 = -9.9999
        ELSE
          zol10 = zol10
        END IF
        IF (zol2 .GT. 0.) THEN
          zol2 = 0.
        ELSE
          zol2 = zol2
        END IF
        IF (zol2 .LT. -9.9999) THEN
          zol2 = -9.9999
        ELSE
          zol2 = zol2
        END IF
        nzol = INT(-(zol(i)*100.))
        g_rzol = -(100.*g_zol(i))
        rzol = -(zol(i)*100.) - nzol
        nzol10 = INT(-(zol10*100.))
        rzol10 = -(zol10*100.) - nzol10
        nzol2 = INT(-(zol2*100.))
        rzol2 = -(zol2*100.) - nzol2
        g_psim(i) = (psimtb(nzol+1)-psimtb(nzol))*g_rzol
        psim(i) = psimtb(nzol) + rzol*(psimtb(nzol+1)-psimtb(nzol))
        g_psih(i) = (psihtb(nzol+1)-psihtb(nzol))*g_rzol
        psih(i) = psihtb(nzol) + rzol*(psihtb(nzol+1)-psihtb(nzol))
        psim10(i) = psimtb(nzol10) + rzol10*(psimtb(nzol10+1)-psimtb(&
&          nzol10))
        psih10(i) = psihtb(nzol10) + rzol10*(psihtb(nzol10+1)-psihtb(&
&          nzol10))
        psim2(i) = psimtb(nzol2) + rzol2*(psimtb(nzol2+1)-psimtb(nzol2))
        psih2(i) = psihtb(nzol2) + rzol2*(psihtb(nzol2+1)-psihtb(nzol2))
        IF (psih(i) .GT. 0.9*gz1oz0(i)) THEN
          g_psih(i) = 0.9*g_gz1oz0(i)
          psih(i) = 0.9*gz1oz0(i)
        ELSE
          psih(i) = psih(i)
        END IF
        IF (psim(i) .GT. 0.9*gz1oz0(i)) THEN
          g_psim(i) = 0.9*g_gz1oz0(i)
          psim(i) = 0.9*gz1oz0(i)
        ELSE
          psim(i) = psim(i)
        END IF
        IF (psih2(i) .GT. 0.9*gz2oz0(i)) THEN
          psih2(i) = 0.9*gz2oz0(i)
        ELSE
          psih2(i) = psih2(i)
        END IF
        IF (psim10(i) .GT. 0.9*gz10oz0(i)) THEN
          psim10(i) = 0.9*gz10oz0(i)
        ELSE
          psim10(i) = psim10(i)
        END IF
        IF (psih10(i) .GT. 0.9*gz10oz0(i)) THEN
          psih10(i) = 0.9*gz10oz0(i)
        ELSE
          psih10(i) = psih10(i)
        END IF
        g_rmol(i) = (g_zol(i)*za(i)-zol(i)*g_za(i))/za(i)**2
        rmol(i) = zol(i)/za(i)
      ELSE IF (br(i) .LT. 0.2) THEN
!                                                                                
!-----CLASS 1; STABLE (NIGHTTIME) CONDITIONS:                                    
!                                                                                
!                                                                                
!-----CLASS 2; DAMPED MECHANICAL TURBULENCE:                                     
!                                                                                
        IF (br(i) .EQ. 0.0) THEN
!                                                                                
!-----CLASS 3; FORCED CONVECTION:                                                
!                                                                                
          regime(i) = 3.
          g_psim(i) = 0.0_8
          psim(i) = 0.0
          g_psih(i) = g_psim(i)
          psih(i) = psim(i)
          psim10(i) = 0.
          psih10(i) = psim10(i)
          psim2(i) = 0.
          psih2(i) = psim2(i)
          IF (ust(i) .LT. 0.01) THEN
            g_zol(i) = g_br(i)*gz1oz0(i) + br(i)*g_gz1oz0(i)
            zol(i) = br(i)*gz1oz0(i)
          ELSE
            g_zol(i) = (karman*((g_govrth(i)*za(i)+govrth(i)*g_za(i))*&
&              mol(i)+govrth(i)*za(i)*g_mol(i))*ust(i)**2-karman*govrth(i&
&              )*za(i)*mol(i)*(g_ust(i)*ust(i)+ust(i)*g_ust(i)))/(ust(i)*&
&              ust(i))**2
            zol(i) = karman*govrth(i)*za(i)*mol(i)/(ust(i)*ust(i))
          END IF
          g_rmol(i) = (g_zol(i)*za(i)-zol(i)*g_za(i))/za(i)**2
          rmol(i) = zol(i)/za(i)
        ELSE
          regime(i) = 2.
          g_psim(i) = -((5.0*(g_br(i)*gz1oz0(i)+br(i)*g_gz1oz0(i))*(1.1-&
&            5.0*br(i))+5.0**2*br(i)*gz1oz0(i)*g_br(i))/(1.1-5.0*br(i))**&
&            2)
          psim(i) = -(5.0*br(i)*gz1oz0(i)/(1.1-5.0*br(i)))
          IF (psim(i) .LT. -10.) THEN
            g_psim(i) = 0.0_8
            psim(i) = -10.
          ELSE
            psim(i) = psim(i)
          END IF
!.....AKB(1976), EQ(16).                                                         
          g_psih(i) = g_psim(i)
          psih(i) = psim(i)
          psim10(i) = 10./za(i)*psim(i)
          IF (psim10(i) .LT. -10.) THEN
            psim10(i) = -10.
          ELSE
            psim10(i) = psim10(i)
          END IF
          psih10(i) = psim10(i)
          psim2(i) = 2./za(i)*psim(i)
          IF (psim2(i) .LT. -10.) THEN
            psim2(i) = -10.
          ELSE
            psim2(i) = psim2(i)
          END IF
          psih2(i) = psim2(i)
! Linear form: PSIM = -0.5*ZA/L; e.g, see eqn 16 of
! Blackadar, Modeling the nocturnal boundary layer, Preprints,
! Third Symposium on Atmospheric Turbulence Diffusion and Air Quality,
! Raleigh, NC, 1976
          g_zol(i) = ((g_br(i)*gz1oz0(i)+br(i)*g_gz1oz0(i))*(1.00001-5.0&
&            *br(i))+br(i)*gz1oz0(i)*5.0*g_br(i))/(1.00001-5.0*br(i))**2
          zol(i) = br(i)*gz1oz0(i)/(1.00001-5.0*br(i))
          IF (zol(i) .GT. 0.5) THEN
! linear form ok
! Holtslag and de Bruin, J. App. Meteor 27, 689-704, 1988;
! see also, Launiainen, Boundary-Layer Meteor 76,165-179, 1995
! Eqn (8) of Launiainen, 1995
            g_zol(i) = 1.89*g_gz1oz0(i)*br(i)**2 + (1.89*gz1oz0(i)+44.2)&
&              *(g_br(i)*br(i)+br(i)*g_br(i)) + 1.18*g_gz1oz0(i)*br(i) + &
&              (1.18*gz1oz0(i)-1.37)*g_br(i)
            zol(i) = (1.89*gz1oz0(i)+44.2)*br(i)*br(i) + (1.18*gz1oz0(i)&
&              -1.37)*br(i)
            IF (zol(i) .GT. 9.999) THEN
              g_zol(i) = 0.0_8
              zol(i) = 9.999
            ELSE
              zol(i) = zol(i)
            END IF
          END IF
! 1.0 over Monin-Obukhov length
          g_rmol(i) = (g_zol(i)*za(i)-zol(i)*g_za(i))/za(i)**2
          rmol(i) = zol(i)/za(i)
        END IF
      ELSE
        regime(i) = 1.
        g_psim(i) = -(10.*g_gz1oz0(i))
        psim(i) = -(10.*gz1oz0(i))
        IF (psim(i) .LT. -10.) THEN
          g_psim(i) = 0.0_8
          psim(i) = -10.
        ELSE
          psim(i) = psim(i)
        END IF
        g_psih(i) = g_psim(i)
        psih(i) = psim(i)
        psim10(i) = 10./za(i)*psim(i)
        IF (psim10(i) .LT. -10.) THEN
          psim10(i) = -10.
        ELSE
          psim10(i) = psim10(i)
        END IF
        psih10(i) = psim10(i)
        psim2(i) = 2./za(i)*psim(i)
        IF (psim2(i) .LT. -10.) THEN
          psim2(i) = -10.
        ELSE
          psim2(i) = psim2(i)
        END IF
        psih2(i) = psim2(i)
!       1.0 over Monin-Obukhov length
        IF (ust(i) .LT. 0.01) THEN
!ZA/L
          g_rmol(i) = g_br(i)*gz1oz0(i) + br(i)*g_gz1oz0(i)
          rmol(i) = br(i)*gz1oz0(i)
        ELSE
!ZA/L
          g_rmol(i) = (karman*((g_govrth(i)*za(i)+govrth(i)*g_za(i))*mol&
&            (i)+govrth(i)*za(i)*g_mol(i))*ust(i)**2-karman*govrth(i)*za(&
&            i)*mol(i)*(g_ust(i)*ust(i)+ust(i)*g_ust(i)))/(ust(i)*ust(i))&
&            **2
          rmol(i) = karman*govrth(i)*za(i)*mol(i)/(ust(i)*ust(i))
        END IF
        IF (rmol(i) .GT. 9.999) THEN
          g_rmol(i) = 0.0_8
          rmol(i) = 9.999
        ELSE
          rmol(i) = rmol(i)
        END IF
!1.0/L
        g_rmol(i) = (g_rmol(i)*za(i)-rmol(i)*g_za(i))/za(i)**2
        rmol(i) = rmol(i)/za(i)
      END IF
    END DO
    g_wspdi = 0.0_8
    g_denomq = 0.0_8
!                                                                                
!-----COMPUTE THE FRICTIONAL VELOCITY:                                           
!     ZA(1982) EQS(2.60),(2.61).                                                 
!                                                                                
    DO i=its,ite
      g_dtg = g_thx(i) - g_thgb(i)
      dtg = thx(i) - thgb(i)
      g_psix = g_gz1oz0(i) - g_psim(i)
      psix = gz1oz0(i) - psim(i)
      psix10 = gz10oz0(i) - psim10(i)
      IF (gz1oz0(i) - psih(i) .LT. 2.) THEN
        psit = 2.
        g_psit = 0.0_8
      ELSE
        g_psit = g_gz1oz0(i) - g_psih(i)
        psit = gz1oz0(i) - psih(i)
      END IF
      IF (xland(i) - 1.5 .GE. 0) THEN
        g_zl = g_znt(i)
        zl = znt(i)
      ELSE
        zl = 0.01
        g_zl = 0.0_8
      END IF
      g_arg1 = karman*(g_ust(i)*za(i)+ust(i)*g_za(i))/xka + (g_za(i)*zl-&
&        za(i)*g_zl)/zl**2
      arg1 = karman*ust(i)*za(i)/xka + za(i)/zl
      g_psiq = g_arg1/arg1 - g_psih(i)
      psiq = ALOG(arg1) - psih(i)
      psit2 = gz2oz0(i) - psih2(i)
      arg10 = karman*ust(i)*2./xka + 2./zl
      psiq2 = ALOG(arg10) - psih2(i)
! AHW: mods to compute ck, cd
      arg10 = karman*ust(i)*10./xka + 10./zl
      psiq10 = ALOG(arg10) - psih10(i)
      IF (PRESENT(isftcflx)) THEN
        IF (isftcflx .EQ. 1 .AND. xland(i) - 1.5 .GE. 0.) THEN
! v3.1
!             Z0Q = 1.e-4 + 1.e-3*(MAX(0.,UST(I)-1.))**2
! hfip1
!             Z0Q = 0.62*2.0E-5/UST(I) + 1.E-3*(MAX(0.,UST(I)-1.5))**2
! v3.2
          z0q = 1.e-4
          g_psiq = g_za(i)/za(i) - g_psih(i)
          psiq = ALOG(za(i)/z0q) - psih(i)
          g_psit = g_psiq
          psit = psiq
          psiq2 = ALOG(2./z0q) - psih2(i)
          psiq10 = ALOG(10./z0q) - psih10(i)
          psit2 = psiq2
        END IF
        IF (isftcflx .EQ. 2 .AND. xland(i) - 1.5 .GE. 0.) THEN
! AHW: Garratt formula: Calculate roughness Reynolds number
!        Kinematic viscosity of air (linear approc to
!                 temp dependence at sea levle)
          g_visc = 1.e-5*0.009*g_scr3(i)
          visc = (1.32+0.009*(scr3(i)-273.15))*1.e-5
!!            VISC=1.5E-5
          g_restar = ((g_ust(i)*znt(i)+ust(i)*g_znt(i))*visc-ust(i)*znt(&
&            i)*g_visc)/visc**2
          restar = ust(i)*znt(i)/visc
          IF (restar .EQ. 0.0_8) THEN
            g_result1 = 0.0_8
          ELSE
            g_result1 = g_restar/(2.0*SQRT(restar))
          END IF
          result1 = SQRT(restar)
          IF (result1 .EQ. 0.0_8) THEN
            g_result2 = 0.0_8
          ELSE
            g_result2 = g_result1/(2.0*SQRT(result1))
          END IF
          result2 = SQRT(result1)
          g_restar2 = 2.48*g_result2
          restar2 = 2.48*result2 - 2.
          g_psit = g_gz1oz0(i) - g_psih(i) + g_restar2
          psit = gz1oz0(i) - psih(i) + restar2
          IF (restar .EQ. 0.0_8) THEN
            g_result1 = 0.0_8
          ELSE
            g_result1 = g_restar/(2.0*SQRT(restar))
          END IF
          result1 = SQRT(restar)
          IF (result1 .EQ. 0.0_8) THEN
            g_result2 = 0.0_8
          ELSE
            g_result2 = g_result1/(2.0*SQRT(result1))
          END IF
          result2 = SQRT(result1)
          g_psiq = g_gz1oz0(i) - g_psih(i) + 2.28*g_result2
          psiq = gz1oz0(i) - psih(i) + 2.28*result2 - 2.
          psit2 = gz2oz0(i) - psih2(i) + restar2
          result1 = SQRT(restar)
          result2 = SQRT(result1)
          psiq2 = gz2oz0(i) - psih2(i) + 2.28*result2 - 2.
          result1 = SQRT(restar)
          result2 = SQRT(result1)
          psiq10 = gz10oz0(i) - psih(i) + 2.28*result2 - 2.
        END IF
      END IF
      IF (PRESENT(ck) .AND. PRESENT(cd) .AND. PRESENT(cka) .AND. PRESENT&
&          (cda)) THEN
        ck(i) = karman/psix10*(karman/psiq10)
        cd(i) = karman/psix10*(karman/psix10)
        cka(i) = karman/psix*(karman/psiq)
        cda(i) = karman/psix*(karman/psix)
      END IF
      IF (PRESENT(iz0tlnd)) THEN
        IF (iz0tlnd .EQ. 1 .AND. xland(i) - 1.5 .LE. 0.) THEN
          g_zl = g_znt(i)
          zl = znt(i)
!             CZIL RELATED CHANGES FOR LAND
          g_visc = 1.e-5*0.009*g_scr3(i)
          visc = (1.32+0.009*(scr3(i)-273.15))*1.e-5
          g_restar = ((g_ust(i)*zl+ust(i)*g_zl)*visc-ust(i)*zl*g_visc)/&
&            visc**2
          restar = ust(i)*zl/visc
!             Modify CZIL according to Chen & Zhang, 2009
          g_pwy1 = -(0.40*g_zl/0.07)
          pwy1 = -(0.40*(zl/0.07))
          g_czil = 10.0**pwy1*LOG(10.0)*g_pwy1
          czil = 10.0**pwy1
          IF (restar .EQ. 0.0_8) THEN
            g_result1 = 0.0_8
          ELSE
            g_result1 = g_restar/(2.0*SQRT(restar))
          END IF
          result1 = SQRT(restar)
          g_psit = g_gz1oz0(i) - g_psih(i) + karman*(g_czil*result1+czil&
&            *g_result1)
          psit = gz1oz0(i) - psih(i) + czil*karman*result1
          IF (restar .EQ. 0.0_8) THEN
            g_result1 = 0.0_8
          ELSE
            g_result1 = g_restar/(2.0*SQRT(restar))
          END IF
          result1 = SQRT(restar)
          g_psiq = g_gz1oz0(i) - g_psih(i) + karman*(g_czil*result1+czil&
&            *g_result1)
          psiq = gz1oz0(i) - psih(i) + czil*karman*result1
          result1 = SQRT(restar)
          psit2 = gz2oz0(i) - psih2(i) + czil*karman*result1
          result1 = SQRT(restar)
          psiq2 = gz2oz0(i) - psih2(i) + czil*karman*result1
        END IF
      END IF
! TO PREVENT OSCILLATIONS AVERAGE WITH OLD VALUE 
      g_ust(i) = 0.5*g_ust(i) + (0.5*karman*g_wspd(i)*psix-0.5*karman*&
&        wspd(i)*g_psix)/psix**2
      ust(i) = 0.5*ust(i) + 0.5*karman*wspd(i)/psix
! TKE coupling: compute ust without vconv for use in tke scheme
      g_arg1 = g_ux(i)*ux(i) + ux(i)*g_ux(i) + g_vx(i)*vx(i) + vx(i)*&
&        g_vx(i)
      arg1 = ux(i)*ux(i) + vx(i)*vx(i)
      IF (arg1 .EQ. 0.0_8) THEN
        g_wspdi(i) = 0.0_8
      ELSE
        g_wspdi(i) = g_arg1/(2.0*SQRT(arg1))
      END IF
      wspdi(i) = SQRT(arg1)
      IF (PRESENT(ustm)) THEN
        g_ustm(i) = 0.5*g_ustm(i) + (0.5*karman*g_wspdi(i)*psix-0.5*&
&          karman*wspdi(i)*g_psix)/psix**2
        ustm(i) = 0.5*ustm(i) + 0.5*karman*wspdi(i)/psix
      END IF
      u10(i) = ux(i)*psix10/psix
      v10(i) = vx(i)*psix10/psix
      th2(i) = thgb(i) + dtg*psit2/psit
      q2(i) = qsfc(i) + (qx(i)-qsfc(i))*psiq2/psiq
!        T2(I) = TH2(I)*(PSFC(I)/100.)**ROVCP                     
      pwx1 = psfcpa(i)/p1000mb
      pwr1 = pwx1**rovcp
      t2(i) = th2(i)*pwr1
!       LATER Q2 WILL BE OVERWRITTEN FOR LAND POINTS IN SURFCE     
!       QA2(I,J) = Q2(I)                                         
!       UA10(I,J) = U10(I)                                      
!       VA10(I,J) = V10(I)                                     
!       write(*,1002)UST(I),KARMAN*WSPD(I),PSIX,KARMAN*WSPD(I)/PSIX
!                                                                                
      IF (xland(i) - 1.5 .LT. 0.) THEN
        IF (ust(i) .LT. 0.1) THEN
          g_ust(i) = 0.0_8
          ust(i) = 0.1
        ELSE
          ust(i) = ust(i)
        END IF
      END IF
      g_mol(i) = (karman*g_dtg*psit-karman*dtg*g_psit)/psit**2/prt
      mol(i) = karman*dtg/psit/prt
      g_denomq(i) = g_psiq
      denomq(i) = psiq
      denomq2(i) = psiq2
      denomt2(i) = psit2
      fm(i) = psix
      fh(i) = psit
    END DO
!                                                                                
!-----COMPUTE THE SURFACE SENSIBLE AND LATENT HEAT FLUXES:                       
    IF (PRESENT(scm_force_flux)) THEN
      IF (scm_force_flux .EQ. 1) GOTO 350
    END IF
    DO i=its,ite
      g_qfx(i) = 0.0_8
      qfx(i) = 0.
      g_hfx(i) = 0.0_8
      hfx(i) = 0.
    END DO
 350 IF (isfflx .NE. 0) THEN
!-----OVER WATER, ALTER ROUGHNESS LENGTH (ZNT) ACCORDING TO WIND (UST).
      DO i=its,ite
        IF (xland(i) - 1.5 .GE. 0) THEN
          g_znt(i) = czo*(g_ust(i)*ust(i)+ust(i)*g_ust(i))/g
          znt(i) = czo*ust(i)*ust(i)/g + ozo
! AHW: change roughness length, and hence the drag coefficients Ck and Cd
          IF (PRESENT(isftcflx)) THEN
            IF (isftcflx .NE. 0) THEN
              IF ((ust(i)/1.06)**0.3 .GT. 1.0) THEN
                zw = 1.0
                g_zw = 0.0_8
              ELSE
                IF (ust(i)/1.06 .GT. 0.0_8) THEN
                  g_zw = 0.3*(ust(i)/1.06)**(-0.7)*g_ust(i)/1.06
                ELSE
                  g_zw = 0.0_8
                END IF
                zw = (ust(i)/1.06)**0.3
              END IF
              g_zn1 = 0.011*(g_ust(i)*ust(i)+ust(i)*g_ust(i))/g
              zn1 = 0.011*ust(i)*ust(i)/g + ozo
              IF (ust(i) .LT. 0.01) THEN
                amax10 = 0.01
                g_amax10 = 0.0_8
              ELSE
                g_amax10 = g_ust(i)
                amax10 = ust(i)
              END IF
              IF (ust(i) .GT. 0.0_8) THEN
                g_pwr10 = -(.3333*ust(i)**(-1.3333)*g_ust(i))
              ELSE
                g_pwr10 = 0.0_8
              END IF
              pwr10 = ust(i)**(-.3333)
              g_zn2 = -(10.*9.5*g_pwr10*EXP(-(9.5*pwr10))) - 0.11*1.5e-5&
&                *g_amax10/amax10**2
              zn2 = 10.*EXP(-(9.5*pwr10)) + 0.11*1.5e-5/amax10
              g_znt(i) = (1.0-zw)*g_zn1 - g_zw*zn1 + g_zw*zn2 + zw*g_zn2
              znt(i) = (1.0-zw)*zn1 + zw*zn2
              IF (znt(i) .GT. 2.85e-3) THEN
                g_znt(i) = 0.0_8
                znt(i) = 2.85e-3
              ELSE
                znt(i) = znt(i)
              END IF
              IF (znt(i) .LT. 1.27e-7) THEN
                g_znt(i) = 0.0_8
                znt(i) = 1.27e-7
              ELSE
                znt(i) = znt(i)
              END IF
            END IF
          END IF
          zl = znt(i)
        ELSE
          zl = 0.01
        END IF
        g_flqc(i) = (mavail(i)*karman*(g_rhox(i)*ust(i)+rhox(i)*g_ust(i)&
&          )*denomq(i)-rhox(i)*mavail(i)*ust(i)*karman*g_denomq(i))/&
&          denomq(i)**2
        flqc(i) = rhox(i)*mavail(i)*ust(i)*karman/denomq(i)
        IF (thx(i) - thgb(i) .GE. 0.) THEN
          dtthx = thx(i) - thgb(i)
        ELSE
          dtthx = -(thx(i)-thgb(i))
        END IF
        IF (dtthx .GT. 1.e-5) THEN
          g_flhc(i) = (((g_cpm(i)*rhox(i)+cpm(i)*g_rhox(i))*ust(i)*mol(i&
&            )+cpm(i)*rhox(i)*(g_ust(i)*mol(i)+ust(i)*g_mol(i)))*(thx(i)-&
&            thgb(i))-cpm(i)*rhox(i)*ust(i)*mol(i)*(g_thx(i)-g_thgb(i)))/&
&            (thx(i)-thgb(i))**2
          flhc(i) = cpm(i)*rhox(i)*ust(i)*mol(i)/(thx(i)-thgb(i))
        ELSE
          g_flhc(i) = 0.0_8
          flhc(i) = 0.
        END IF
      END DO
!                                                                                
!-----COMPUTE SURFACE MOIST FLUX:                                               
!
!     IF(IDRY.EQ.1)GOTO 390
      IF (PRESENT(scm_force_flux)) THEN
        IF (scm_force_flux .EQ. 1) GOTO 405
      END IF
!                                                                               
      DO i=its,ite
        g_qfx(i) = g_flqc(i)*(qsfc(i)-qx(i)) + flqc(i)*(g_qsfc(i)-g_qx(i&
&          ))
        qfx(i) = flqc(i)*(qsfc(i)-qx(i))
        IF (qfx(i) .LT. 0.) THEN
          g_qfx(i) = 0.0_8
          qfx(i) = 0.
        ELSE
          qfx(i) = qfx(i)
        END IF
        lh(i) = xlv*qfx(i)
      END DO
!-----COMPUTE SURFACE HEAT FLUX:                                                 
!                                                                                
      DO i=its,ite
        IF (xland(i) - 1.5 .GT. 0.) THEN
          g_hfx(i) = g_flhc(i)*(thgb(i)-thx(i)) + flhc(i)*(g_thgb(i)-&
&            g_thx(i))
          hfx(i) = flhc(i)*(thgb(i)-thx(i))
          IF (PRESENT(isftcflx)) THEN
            IF (isftcflx .NE. 0) THEN
! AHW: add dissipative heating term
              g_hfx(i) = g_hfx(i) + (g_rhox(i)*ustm(i)+rhox(i)*g_ustm(i)&
&                )*ustm(i)*wspdi(i) + rhox(i)*ustm(i)*(g_ustm(i)*wspdi(i)&
&                +ustm(i)*g_wspdi(i))
              hfx(i) = hfx(i) + rhox(i)*ustm(i)*ustm(i)*wspdi(i)
            END IF
          END IF
        ELSE IF (xland(i) - 1.5 .LT. 0.) THEN
          g_hfx(i) = g_flhc(i)*(thgb(i)-thx(i)) + flhc(i)*(g_thgb(i)-&
&            g_thx(i))
          hfx(i) = flhc(i)*(thgb(i)-thx(i))
          IF (hfx(i) .LT. -250.) THEN
            g_hfx(i) = 0.0_8
            hfx(i) = -250.
          ELSE
            hfx(i) = hfx(i)
          END IF
        END IF
      END DO
 405  CONTINUE
      DO i=its,ite
        IF (xland(i) - 1.5 .GE. 0) THEN
          zl = znt(i)
        ELSE
          zl = 0.01
        END IF
        g_chs(i) = (karman*g_ust(i)*denomq(i)-ust(i)*karman*g_denomq(i))&
&          /denomq(i)**2
        chs(i) = ust(i)*karman/denomq(i)
!        GZ2OZ0(I)=ALOG(2./ZNT(I))
!        PSIM2(I)=-10.*GZ2OZ0(I)
!        PSIM2(I)=AMAX1(PSIM2(I),-10.)
!        PSIH2(I)=PSIM2(I)
        cqs2(i) = ust(i)*karman/denomq2(i)
        chs2(i) = ust(i)*karman/denomt2(i)
      END DO
    END IF
  END SUBROUTINE G_SFCLAY1D
!-------------------------------------------------------------------
END MODULE G_MODULE_SF_SFCLAY
