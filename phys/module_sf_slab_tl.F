!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
!WRF:MODEL_LAYER:PHYSICS
!
MODULE G_MODULE_SF_SLAB
  IMPLICIT NONE
!-------------------------------------------------------------------          
!---SPECIFY CONSTANTS AND LAYERS FOR SOIL MODEL
!---SOIL DIFFUSION CONSTANT SET (M^2/S)
  REAL, PARAMETER :: difsl=5.e-7
!---FACTOR TO MAKE SOIL STEP MORE CONSERVATIVE
  REAL, PARAMETER :: soilfac=1.25

CONTAINS
!  Differentiation of slab in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: capg tslb hfx tsk qfx
!   with respect to varying inputs: capg p3d tslb hfx tsk t3d qv3d
!                psfc flqc qfx flhc
!----------------------------------------------------------------
  SUBROUTINE G_SLAB(t3d, g_t3d, qv3d, g_qv3d, p3d, g_p3d, flhc, g_flhc, &
&    flqc, g_flqc, psfc, g_psfc, xland, tmn, hfx, g_hfx, qfx, g_qfx, lh, &
&    tsk, g_tsk, qsfc, chklowq, gsw, glw, capg, g_capg, thc, snowc, emiss&
&    , mavail, deltsm, rovcp, xlv, dtmin, ifsnow, svp1, svp2, svp3, svpt0&
&    , ep2, karman, eomeg, stbolt, tslb, g_tslb, zs, dzs, num_soil_layers&
&    , radiation, p1000mb, ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte)
    IMPLICIT NONE
!----------------------------------------------------------------
!                                                                        
!     SUBROUTINE SLAB CALCULATES THE GROUND TEMPERATURE TENDENCY 
!     ACCORDING TO THE RESIDUAL OF THE SURFACE ENERGY BUDGET           
!     (BLACKADAR, 1978B).                                              
!                                                                      
!     CHANGES:                                                         
!          FOR SOIL SUB-TIMESTEPS UPDATE SURFACE HFX AND QFX AS TG     
!          CHANGES TO PREVENT POSSIBLE INSTABILITY FOR LONG MODEL      
!          STEPS (DT > ~200 SEC).                                      
!                                                                      
!          PUT SNOW COVER CHECK ON SOIL SUB-TIMESTEPS                  
!                                                                      
!          MAKE UPPER LIMIT ON SOIL SUB-STEP LENGTH MORE CONSERVATIVE  
!                                                                      
!----------------------------------------------------------------          
!-- T3D         temperature (K)
!-- QV3D        3D water vapor mixing ratio (Kg/Kg)
!-- P3D         3D pressure (Pa)
!-- FLHC        exchange coefficient for heat (m/s)
!-- FLQC        exchange coefficient for moisture (m/s)
!-- PSFC        surface pressure (Pa)
!-- XLAND       land mask (1 for land, 2 for water)
!-- TMN         soil temperature at lower boundary (K)
!-- HFX         upward heat flux at the surface (W/m^2)
!-- QFX         upward moisture flux at the surface (kg/m^2/s)
!-- LH          latent heat flux at the surface (W/m^2)
!-- TSK         surface temperature (K)
!-- GSW         downward short wave flux at ground surface (W/m^2)      
!-- GLW         downward long wave flux at ground surface (W/m^2)
!-- CAPG        heat capacity for soil (J/K/m^3)
!-- THC         thermal inertia (Cal/cm/K/s^0.5)
!-- SNOWC       flag indicating snow coverage (1 for snow cover)
!-- EMISS       surface emissivity (between 0 and 1)
!-- DELTSM      time step (second)
!-- ROVCP       R/CP
!-- XLV         latent heat of melting (J/kg)
!-- DTMIN       time step (minute)
!-- IFSNOW      ifsnow=1 for snow-cover effects
!-- SVP1        constant for saturation vapor pressure (kPa)
!-- SVP2        constant for saturation vapor pressure (dimensionless)
!-- SVP3        constant for saturation vapor pressure (K)
!-- SVPT0       constant for saturation vapor pressure (K)
!-- EP1         constant for virtual temperature (R_v/R_d - 1) (dimensionless)
!-- EP2         constant for specific humidity calculation 
!               (R_d/R_v) (dimensionless)
!-- KARMAN      Von Karman constant
!-- EOMEG       angular velocity of earth's rotation (rad/s)
!-- STBOLT      Stefan-Boltzmann constant (W/m^2/K^4)
!-- TSLB        soil temperature in 5-layer model
!-- ZS          depths of centers of soil layers
!-- DZS         thicknesses of soil layers
!-- num_soil_layers   the number of soil layers
!-- ids         start index for i in domain
!-- ide         end index for i in domain
!-- jds         start index for j in domain
!-- jde         end index for j in domain
!-- kds         start index for k in domain
!-- kde         end index for k in domain
!-- ims         start index for i in memory
!-- ime         end index for i in memory
!-- jms         start index for j in memory
!-- jme         end index for j in memory
!-- kms         start index for k in memory
!-- kme         end index for k in memory
!-- its         start index for i in tile
!-- ite         end index for i in tile
!-- jts         start index for j in tile
!-- jte         end index for j in tile
!-- kts         start index for k in tile
!-- kte         end index for k in tile
!----------------------------------------------------------------
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte
    INTEGER, INTENT(IN) :: num_soil_layers
    LOGICAL, INTENT(IN) :: radiation
    INTEGER, INTENT(IN) :: ifsnow
!
    REAL, INTENT(IN) :: dtmin, xlv, rovcp, deltsm
    REAL, INTENT(IN) :: svp1, svp2, svp3, svpt0
    REAL, INTENT(IN) :: ep2, karman, eomeg, stbolt
    REAL, INTENT(IN) :: p1000mb
    REAL, DIMENSION(ims:ime, num_soil_layers, jms:jme), INTENT(INOUT) ::&
&    tslb
    REAL, DIMENSION(ims:ime, num_soil_layers, jms:jme), INTENT(INOUT) ::&
&    g_tslb
    REAL, DIMENSION(num_soil_layers), INTENT(IN) :: zs, dzs
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: qv3d, p3d&
&    , t3d
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_qv3d, &
&    g_p3d, g_t3d
!
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: snowc, xland, emiss&
&    , mavail, tmn, gsw, glw, thc
!CHKLOWQ is declared as memory size
!
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: hfx, qfx, lh, &
&    capg, tsk, qsfc, chklowq
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_hfx, g_qfx, &
&    g_capg, g_tsk
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: psfc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: g_psfc
!
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: flhc, flqc
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: g_flhc, g_flqc
! LOCAL VARS
    REAL, DIMENSION(its:ite) :: qv1d, p1d, t1d
    REAL, DIMENSION(its:ite) :: g_qv1d, g_p1d, g_t1d
    INTEGER :: i, j
    g_qv1d = 0.0_8
    g_p1d = 0.0_8
    g_t1d = 0.0_8
    DO j=jts,jte
      DO i=its,ite
        g_t1d(i) = g_t3d(i, 1, j)
        t1d(i) = t3d(i, 1, j)
        g_qv1d(i) = g_qv3d(i, 1, j)
        qv1d(i) = qv3d(i, 1, j)
        g_p1d(i) = g_p3d(i, 1, j)
        p1d(i) = p3d(i, 1, j)
      END DO
! the indices to the PSFC argument in the following call look
! wrong; however, it is correct to call with its (and not ims)
! because of the way PSFC is defined in SLAB1D. Whether *that*
! is a good idea or not, this commenter cannot comment. JM
      CALL G_SLAB1D(j, t1d, g_t1d, qv1d, g_qv1d, p1d, g_p1d, flhc(ims, j)&
&              , g_flhc(ims, j), flqc(ims, j), g_flqc(ims, j), psfc(its, j)&
&              , g_psfc(its, j), xland(ims, j), tmn(ims, j), hfx(ims, j), &
&              g_hfx(ims, j), qfx(ims, j), g_qfx(ims, j), tsk(ims, j), g_tsk(ims, j&
&              ), qsfc(ims, j), chklowq(ims, j), lh(ims, j), gsw(ims, j), glw(ims, &
&              j), capg(ims, j), g_capg(ims, j), thc(ims, j), snowc(ims, j), &
&              emiss(ims, j), mavail(ims, j), deltsm, rovcp, xlv, dtmin, &
&              ifsnow, svp1, svp2, svp3, svpt0, ep2, karman, eomeg, &
&              stbolt, tslb(ims, 1, j), g_tslb(ims, 1, j), zs, dzs, &
&              num_soil_layers, radiation, p1000mb, ids, ide, jds, jde, &
&              kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte&
&              , kts, kte)
    END DO
  END SUBROUTINE G_SLAB
!----------------------------------------------------------------

!  Differentiation of slab1d in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: capg hfx tsk qfx tslb2d
!   with respect to varying inputs: qv1d capg psfcpa hfx tsk p1d
!                flqc qfx tslb2d flhc t1d
!----------------------------------------------------------------
  SUBROUTINE G_SLAB1D(j, t1d, g_t1d, qv1d, g_qv1d, p1d, g_p1d, flhc, &
&    g_flhc, flqc, g_flqc, psfcpa, g_psfcpa, xland, tmn, hfx, g_hfx, qfx&
&    , g_qfx, tsk, g_tsk, qsfc, chklowq, lh, gsw, glw, capg, g_capg, thc&
&    , snowc, emiss, mavail, deltsm, rovcp, xlv, dtmin, ifsnow, svp1, &
&    svp2, svp3, svpt0, ep2, karman, eomeg, stbolt, tslb2d, g_tslb2d, zs&
&    , dzs, num_soil_layers, radiation, p1000mb, ids, ide, jds, jde, kds&
&    , kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte)
    IMPLICIT NONE
!                                                                                
!----------------------------------------------------------------
!                                                                        
!     SUBROUTINE SLAB CALCULATES THE GROUND TEMPERATURE TENDENCY 
!     ACCORDING TO THE RESIDUAL OF THE SURFACE ENERGY BUDGET           
!     (BLACKADAR, 1978B).                                              
!                                                                      
!     CHANGES:                                                         
!          FOR SOIL SUB-TIMESTEPS UPDATE SURFACE HFX AND QFX AS TG     
!          CHANGES TO PREVENT POSSIBLE INSTABILITY FOR LONG MODEL      
!          STEPS (DT > ~200 SEC).                                      
!                                                                      
!          PUT SNOW COVER CHECK ON SOIL SUB-TIMESTEPS                  
!                                                                      
!          MAKE UPPER LIMIT ON SOIL SUB-STEP LENGTH MORE CONSERVATIVE  
!                                                                      
!----------------------------------------------------------------          
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte, j
    INTEGER, INTENT(IN) :: num_soil_layers
    LOGICAL, INTENT(IN) :: radiation
    INTEGER, INTENT(IN) :: ifsnow
!
    REAL, INTENT(IN) :: dtmin, xlv, rovcp, deltsm
    REAL, INTENT(IN) :: svp1, svp2, svp3, svpt0
    REAL, INTENT(IN) :: ep2, karman, eomeg, stbolt
    REAL, INTENT(IN) :: p1000mb
    REAL, DIMENSION(ims:ime, num_soil_layers), INTENT(INOUT) :: tslb2d
    REAL, DIMENSION(ims:ime, num_soil_layers), INTENT(INOUT) :: g_tslb2d
    REAL, DIMENSION(num_soil_layers), INTENT(IN) :: zs, dzs
!
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: hfx, qfx, lh, capg, tsk, &
&    qsfc, chklowq
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_hfx, g_qfx, g_capg, &
&    g_tsk
!
    REAL, DIMENSION(ims:ime), INTENT(IN) :: snowc, xland, emiss, mavail&
&    , tmn, gsw, glw, thc
!
    REAL, DIMENSION(its:ite), INTENT(IN) :: qv1d, p1d, t1d
    REAL, DIMENSION(its:ite), INTENT(IN) :: g_qv1d, g_p1d, g_t1d
!
    REAL, DIMENSION(its:ite), INTENT(IN) :: psfcpa
    REAL, DIMENSION(its:ite), INTENT(IN) :: g_psfcpa
!
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: flhc, flqc
    REAL, DIMENSION(ims:ime), INTENT(INOUT) :: g_flhc, g_flqc
! LOCAL VARS
    REAL, DIMENSION(its:ite) :: psfc
    REAL, DIMENSION(its:ite) :: g_psfc
    REAL, DIMENSION(its:ite) :: thx, qx, scr3
    REAL, DIMENSION(its:ite) :: g_thx, g_qx, g_scr3
    REAL, DIMENSION(its:ite) :: dthgdt, tg0, thtmn, xld1, tscvn, oltg, &
&    upflux, hm, rnet, xinet, qs, dtsdt
    REAL, DIMENSION(its:ite) :: g_dthgdt, g_tg0, g_tscvn, g_upflux, g_hm&
&    , g_rnet, g_xinet, g_qs, g_dtsdt
!
    REAL, DIMENSION(its:ite, num_soil_layers) :: flux
    REAL, DIMENSION(its:ite, num_soil_layers) :: g_flux
!
    INTEGER :: i, k, nsoil, itsoil, l, nk, radswtch
    REAL :: ps, ps1, xldcol, tskx, rnsoil, rhog1, rhog2, rhog3, lamdag
    REAL :: g_ps, g_ps1, g_tskx
    REAL :: thg, esg, qsg, hfxt, qfxt, cs, csw, lamg(4), thcon, pl
    REAL :: g_thg, g_esg, g_qsg, g_hfxt, g_qfxt, g_thcon, g_pl
    REAL :: pwx1
    REAL :: g_pwx1
    REAL :: pwr1
    REAL :: g_pwr1
    REAL :: arg1
    REAL :: g_arg1
    REAL :: pwx10
    REAL :: g_pwx10
!----------------------------------------------------------------------          
!-----DETERMINE IF ANY POINTS IN COLUMN ARE LAND (RATHER THAN OCEAN)             
!       POINTS.  IF NOT, SKIP DOWN TO THE PRINT STATEMENTS SINCE OCEAN           
!       SURFACE TEMPERATURES ARE NOT ALLOWED TO CHANGE.                          
!                                                                                
! from sfcrad   
!----------------------------------------------------------------------
    DATA csw /4.183e6/
    DATA lamg /1.407e-8, -1.455e-5, 6.290e-3, 0.16857/
    g_psfc = 0.0_8
    DO i=its,ite
! in cmb
      g_psfc(i) = g_psfcpa(i)/1000.
      psfc(i) = psfcpa(i)/1000.
    END DO
    g_thx = 0.0_8
    g_scr3 = 0.0_8
    DO i=its,ite
! PL cmb
      g_pl = g_p1d(i)/1000.
      pl = p1d(i)/1000.
      g_scr3(i) = g_t1d(i)
      scr3(i) = t1d(i)
!         THCON=(100./PL)**ROVCP
      g_pwx1 = -(p1000mb*0.001*g_pl/pl**2)
      pwx1 = p1000mb*0.001/pl
      IF (pwx1 .GT. 0.0_8 .OR. (pwx1 .LT. 0.0_8 .AND. rovcp .EQ. INT(&
&          rovcp))) THEN
        g_thcon = rovcp*pwx1**(rovcp-1)*g_pwx1
      ELSE IF (pwx1 .EQ. 0.0_8 .AND. rovcp .EQ. 1.0) THEN
        g_thcon = g_pwx1
      ELSE
        g_thcon = 0.0_8
      END IF
      thcon = pwx1**rovcp
      g_thx(i) = g_scr3(i)*thcon + scr3(i)*g_thcon
      thx(i) = scr3(i)*thcon
      g_qx(i) = 0.0_8
      qx(i) = 0.
    END DO
    g_qx = 0.0_8
!     IF(IDRY.EQ.1) GOTO 81
    DO i=its,ite
      g_qx(i) = g_qv1d(i)
      qx(i) = qv1d(i)
    END DO
!
!-----THE SLAB THERMAL CAPACITY CAPG(I) ARE DEPENDENT ON:
!     THC(I) - SOIL THERMAL INERTIAL, ONLY.
!
    DO i=its,ite
      g_capg(i) = 0.0_8
      capg(i) = 3.298e6*thc(i)
      IF (num_soil_layers .GT. 1) THEN
! CAPG REPRESENTS SOIL HEAT CAPACITY (J/K/M^3) WHEN DIFSL=5.E-7 (M^2/S)
! TO GIVE A CORRECT THERMAL INERTIA (=CAPG*DIFSL^0.5)
        g_capg(i) = 0.0_8
        capg(i) = 5.9114e7*thc(i)
      END IF
    END DO
!        
    xldcol = 2.0
    DO i=its,ite
      IF (xldcol .GT. xland(i)) THEN
        xldcol = xland(i)
      ELSE
        xldcol = xldcol
      END IF
    END DO
!                                                                                
    IF (xldcol .LE. 1.5) THEN
!                                                                                
!                                                                                
!-----CONVERT SLAB TEMPERATURE TO POTENTIAL TEMPERATURE AND                      
!     SET XLD1(I) = 0. FOR OCEAN POINTS:                                         
!                                                                                
!                                                                                
      DO i=its,ite
        IF (xland(i) - 1.5 .GE. 0) THEN
          xld1(i) = 0.
        ELSE
          xld1(i) = 1.
        END IF
      END DO
      g_tg0 = 0.0_8
!                                                                                
!-----CONVERT 'TSK(THETAG)' TO 'TG' FOR 'IUP' CALCULATION ....                   
!       IF WE ARE USING THE BLACKADAR MULTI-LEVEL (HIGH-RESOLUTION)              
!       PBL MODEL                                                                
!                                                                                
      DO i=its,ite
        IF (xld1(i) .GE. 0.5) THEN
! PS cmb
          ps = psfc(i)
! TSK is Temperature at gound sfc
!       TG0(I)=TSK(I)*(PS*0.01)**ROVCP                                         
          g_tg0(i) = g_tsk(i)
          tg0(i) = tsk(i)
        END IF
      END DO
!                                                                                
!-----COMPUTE THE SURFACE ENERGY BUDGET:                                         
!                                                                                
!     IF(ISOIL.EQ.1)NSOIL=1                                                      
      IF (num_soil_layers .GT. 1) nsoil = 1
      IF (radiation) THEN
        radswtch = 1
        g_dthgdt = 0.0_8
        g_qs = 0.0_8
        g_rnet = 0.0_8
        g_xinet = 0.0_8
        g_hm = 0.0_8
        g_upflux = 0.0_8
      ELSE
        radswtch = 0
        g_dthgdt = 0.0_8
        g_qs = 0.0_8
        g_rnet = 0.0_8
        g_xinet = 0.0_8
        g_hm = 0.0_8
        g_upflux = 0.0_8
      END IF
      DO i=its,ite
        IF (xld1(i) .GE. 0.5) THEN
!        OLTG(I)=TSK(I)*(100./PSFC(I))**ROVCP
          pwx1 = p1000mb*0.001/psfc(i)
          pwr1 = pwx1**rovcp
          oltg(i) = tsk(i)*pwr1
          g_upflux(i) = radswtch*stbolt*4*tg0(i)**3*g_tg0(i)
          upflux(i) = radswtch*stbolt*tg0(i)**4
          g_xinet(i) = -(emiss(i)*g_upflux(i))
          xinet(i) = emiss(i)*(glw(i)-upflux(i))
          g_rnet(i) = g_xinet(i)
          rnet(i) = gsw(i) + xinet(i)
          g_hm(i) = 1.18*eomeg*g_tg0(i)
          hm(i) = 1.18*eomeg*(tg0(i)-tmn(i))
!       MOISTURE FLUX CALCULATED HERE (OVERWRITES SFC LAYER VALUE FOR LAND)
          g_arg1 = (svp2*g_tg0(i)*(tg0(i)-svp3)-svp2*(tg0(i)-svpt0)*&
&            g_tg0(i))/(tg0(i)-svp3)**2
          arg1 = svp2*(tg0(i)-svpt0)/(tg0(i)-svp3)
          g_esg = svp1*g_arg1*EXP(arg1)
          esg = svp1*EXP(arg1)
          g_qsg = (ep2*g_esg*(psfc(i)-esg)-ep2*esg*(g_psfc(i)-g_esg))/(&
&            psfc(i)-esg)**2
          qsg = ep2*esg/(psfc(i)-esg)
          g_pwx1 = -(100.*g_psfc(i)/psfc(i)**2)
          pwx1 = 100./psfc(i)
          IF (pwx1 .GT. 0.0_8 .OR. (pwx1 .LT. 0.0_8 .AND. rovcp .EQ. INT&
&              (rovcp))) THEN
            g_pwr1 = rovcp*pwx1**(rovcp-1)*g_pwx1
          ELSE IF (pwx1 .EQ. 0.0_8 .AND. rovcp .EQ. 1.0) THEN
            g_pwr1 = g_pwx1
          ELSE
            g_pwr1 = 0.0_8
          END IF
          pwr1 = pwx1**rovcp
          g_thg = g_tsk(i)*pwr1 + tsk(i)*g_pwr1
          thg = tsk(i)*pwr1
          g_hfx(i) = g_flhc(i)*(thg-thx(i)) + flhc(i)*(g_thg-g_thx(i))
          hfx(i) = flhc(i)*(thg-thx(i))
          g_qfx(i) = g_flqc(i)*(qsg-qx(i)) + flqc(i)*(g_qsg-g_qx(i))
          qfx(i) = flqc(i)*(qsg-qx(i))
          lh(i) = qfx(i)*xlv
          g_qs(i) = g_hfx(i) + xlv*g_qfx(i)
          qs(i) = hfx(i) + qfx(i)*xlv
!       IF(ISOIL.EQ.0)THEN                                                       
          IF (num_soil_layers .EQ. 1) THEN
            g_dthgdt(i) = ((g_rnet(i)-g_qs(i))*capg(i)-(rnet(i)-qs(i))*&
&              g_capg(i))/capg(i)**2 - g_hm(i)
            dthgdt(i) = (rnet(i)-qs(i))/capg(i) - hm(i)
          ELSE
            g_dthgdt(i) = 0.0_8
            dthgdt(i) = 0.
          END IF
        END IF
      END DO
!     IF(ISOIL.EQ.1)THEN                                                         
      IF (num_soil_layers .GT. 1) THEN
        arg1 = soilfac*4*difsl/dzs(1)*deltsm/dzs(1)
        nsoil = 1 + INT(arg1)
        rnsoil = 1./FLOAT(nsoil)
        g_flux = 0.0_8
        g_dtsdt = 0.0_8
!                                                                                
!     SOIL SUB-TIMESTEP                                                          
!                                                                                
        DO itsoil=1,nsoil
          DO i=its,ite
            DO l=1,num_soil_layers-1
              IF (xld1(i) .GE. 0.5) THEN
                IF (l .EQ. 1 .AND. itsoil .GT. 1) THEN
!                PS1=(PSFC(I)*0.01)**ROVCP    
                  g_pwx10 = g_psfcpa(i)/p1000mb
                  pwx10 = psfcpa(i)/p1000mb
                  IF (pwx10 .GT. 0.0_8 .OR. (pwx10 .LT. 0.0_8 .AND. &
&                      rovcp .EQ. INT(rovcp))) THEN
                    g_ps1 = rovcp*pwx10**(rovcp-1)*g_pwx10
                  ELSE IF (pwx10 .EQ. 0.0_8 .AND. rovcp .EQ. 1.0) THEN
                    g_ps1 = g_pwx10
                  ELSE
                    g_ps1 = 0.0_8
                  END IF
                  ps1 = pwx10**rovcp
! for rk scheme A and B are the same
                  g_ps = g_psfc(i)
                  ps = psfc(i)
                  g_thg = (g_tslb2d(i, 1)*ps1-tslb2d(i, 1)*g_ps1)/ps1**2
                  thg = tslb2d(i, 1)/ps1
                  g_arg1 = (svp2*g_tslb2d(i, 1)*(tslb2d(i, 1)-svp3)-svp2&
&                    *(tslb2d(i, 1)-svpt0)*g_tslb2d(i, 1))/(tslb2d(i, 1)-&
&                    svp3)**2
                  arg1 = svp2*(tslb2d(i, 1)-svpt0)/(tslb2d(i, 1)-svp3)
                  g_esg = svp1*g_arg1*EXP(arg1)
                  esg = svp1*EXP(arg1)
                  g_qsg = (ep2*g_esg*(ps-esg)-ep2*esg*(g_ps-g_esg))/(ps-&
&                    esg)**2
                  qsg = ep2*esg/(ps-esg)
!     UPDATE FLUXES FOR NEW GROUND TEMPERATURE                                   
                  g_hfxt = g_flhc(i)*(thg-thx(i)) + flhc(i)*(g_thg-g_thx&
&                    (i))
                  hfxt = flhc(i)*(thg-thx(i))
                  g_qfxt = g_flqc(i)*(qsg-qx(i)) + flqc(i)*(g_qsg-g_qx(i&
&                    ))
                  qfxt = flqc(i)*(qsg-qx(i))
                  g_qs(i) = g_hfxt + xlv*g_qfxt
                  qs(i) = hfxt + qfxt*xlv
!     SUM HFX AND QFX OVER SOIL TIMESTEPS                                        
                  g_hfx(i) = g_hfx(i) + g_hfxt
                  hfx(i) = hfx(i) + hfxt
                  g_qfx(i) = g_qfx(i) + g_qfxt
                  qfx(i) = qfx(i) + qfxt
                END IF
                g_flux(i, 1) = g_rnet(i) - g_qs(i)
                flux(i, 1) = rnet(i) - qs(i)
                g_flux(i, l+1) = -(difsl*(g_capg(i)*(tslb2d(i, l+1)-&
&                  tslb2d(i, l))+capg(i)*(g_tslb2d(i, l+1)-g_tslb2d(i, l)&
&                  ))/(zs(l+1)-zs(l)))
                flux(i, l+1) = -(difsl*capg(i)*(tslb2d(i, l+1)-tslb2d(i&
&                  , l))/(zs(l+1)-zs(l)))
                g_dtsdt(i) = -(((g_flux(i, l+1)-g_flux(i, l))*dzs(l)*&
&                  capg(i)-(flux(i, l+1)-flux(i, l))*dzs(l)*g_capg(i))/(&
&                  dzs(l)*capg(i))**2)
                dtsdt(i) = -((flux(i, l+1)-flux(i, l))/(dzs(l)*capg(i)))
                g_tslb2d(i, l) = g_tslb2d(i, l) + deltsm*rnsoil*g_dtsdt(&
&                  i)
                tslb2d(i, l) = tslb2d(i, l) + dtsdt(i)*deltsm*rnsoil
                IF (ifsnow .EQ. 1 .AND. l .EQ. 1) THEN
                  IF (snowc(i) .GT. 0. .AND. tslb2d(i, 1) .GT. 273.16) &
&                  THEN
                    g_tslb2d(i, 1) = 0.0_8
                    tslb2d(i, 1) = 273.16
                  END IF
                END IF
                IF (l .EQ. 1) THEN
                  g_dthgdt(i) = g_dthgdt(i) + rnsoil*g_dtsdt(i)
                  dthgdt(i) = dthgdt(i) + rnsoil*dtsdt(i)
                END IF
                IF (itsoil .EQ. nsoil .AND. l .EQ. 1) THEN
!     AVERAGE HFX AND QFX OVER SOIL TIMESTEPS FOR OUTPUT TO PBL                  
                  g_hfx(i) = rnsoil*g_hfx(i)
                  hfx(i) = hfx(i)*rnsoil
                  g_qfx(i) = rnsoil*g_qfx(i)
                  qfx(i) = qfx(i)*rnsoil
                  lh(i) = qfx(i)*xlv
                END IF
              END IF
            END DO
          END DO
        END DO
      END IF
!                                                                                
      DO i=its,ite
        IF (xld1(i) .GE. 0.5) THEN
          g_tskx = g_tg0(i) + deltsm*g_dthgdt(i)
          tskx = tg0(i) + deltsm*dthgdt(i)
! TSK is temperature
!       TSK(I)=TSKX*(100./PS1)**ROVCP                                          
          g_tsk(i) = g_tskx
          tsk(i) = tskx
        END IF
      END DO
!                                                                                
!-----MODIFY THE THE GROUND TEMPERATURE IF THE SNOW COVER EFFECTS ARE            
!     CONSIDERED: LIMIT THE GROUND TEMPERATURE UNDER 0 C.                        
!                                                                                
      IF (ifsnow .NE. 0) THEN
        g_tscvn = 0.0_8
        DO i=its,ite
          IF (xld1(i) .GE. 0.5) THEN
!       PS1=(PSFC(I)*0.01)**ROVCP             
!       TSCVN(I)=TSK(I)*PS1                                            
            g_tscvn(i) = g_tsk(i)
            tscvn(i) = tsk(i)
            IF (snowc(i) .GT. 0. .AND. tscvn(i) .GT. 273.16) THEN
              g_tscvn(i) = 0.0_8
              tscvn(i) = 273.16
            ELSE
              tscvn(i) = tscvn(i)
            END IF
!       TSK(I)=TSCVN(I)/PS1                                                    
            g_tsk(i) = g_tscvn(i)
            tsk(i) = tscvn(i)
          END IF
        END DO
      END IF
    END IF
!                                                                                
    DO i=its,ite
! QSFC and CHKLOWQ needed by Eta PBL
! WA added check for flqc = 0 to accomodate TEMF (and others?)
      IF (flqc(i) .NE. 0.) THEN
        qsfc(i) = qx(i) + qfx(i)/flqc(i)
      ELSE
        qsfc(i) = qx(i)
      END IF
      chklowq(i) = mavail(i)
    END DO
  END SUBROUTINE G_SLAB1D
!----------------------------------------------------------------
END MODULE G_MODULE_SF_SLAB
