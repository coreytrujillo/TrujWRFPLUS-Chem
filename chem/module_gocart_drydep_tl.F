MODULE G_MODULE_GOCART_DRYDEP
  IMPLICIT NONE
CONTAINS
!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
!  Differentiation of gocart_drydep_driver in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: ddvel
!   with respect to varying inputs: ust aer_res ddvel znt rmol
!                pbl
  SUBROUTINE G_GOCART_DRYDEP_DRIVER(dtstep, config_flags, numgas, t_phy&
&    , moist, p8w, t8w, rmol, g_rmol, aer_res, g_aer_res, p_phy, chem, &
&    rho_phy, dz8w, ddvel, g_ddvel, xland, hfx, ivgtyp, tsk, vegfra, pbl&
&    , g_pbl, ust, g_ust, znt, g_znt, xlat, xlong, &
               dustdrydep_1,dustdrydep_2,dustdrydep_3,         &
               dustdrydep_4,dustdrydep_5,                      &
               depvelocity, ids, ide, jds, jde, &
&    kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte&
&  )
    USE module_model_constants
    USE module_configure
    USE module_state_description
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte, numgas
    INTEGER, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ivgtyp
    REAL, INTENT(IN) :: dtstep
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist), INTENT(IN) ::&
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: t_phy, &
&    p_phy, dz8w, t8w, p8w, rho_phy
    REAL, DIMENSION(its:ite, jts:jte, num_chem), INTENT(INOUT) :: ddvel
    REAL, DIMENSION(its:ite, jts:jte, num_chem), INTENT(INOUT) :: &
&    g_ddvel
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: tsk, vegfra, pbl, &
&    ust, xlat, xlong, rmol, xland, znt, hfx
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: g_pbl, g_ust, &
&    g_rmol, g_znt
    REAL, DIMENSION(its:ite, jts:jte), INTENT(IN) :: aer_res
    REAL, DIMENSION(its:ite, jts:jte), INTENT(IN) :: g_aer_res
   REAL, DIMENSION( ims:ime, jms:jme ), INTENT(INOUT) ::        &
                dustdrydep_1, dustdrydep_2, dustdrydep_3,       &
                dustdrydep_4, dustdrydep_5, depvelocity
!! .. Local Scalars ..
    INTEGER :: iland, iprt, iseason, jce, jcs, n, nr, ipr, jpr, nvr, &
&    idrydep_onoff, imx, jmx, lmx
    INTEGER :: ii, jj, kk, i, j, k, nv
    INTEGER, DIMENSION(1, 1) :: ilwi, ireg
    REAL :: clwchem, dvfog, dvpart, rad, rhchem, ta, vegfrac, z1, zntt
!     real*8, DIMENSION (1,1,1,3) :: erodin
!     real*8, DIMENSION (5) :: tc,bems
!     real*8, dimension (1,1) :: z0,w10m,gwet,airden,airmas,delz_sfc,hflux,ts,pblz,ustar,ps
    REAL, DIMENSION(1, 1) :: z0, airden, delz_sfc, hflux, ts, pblz, &
&    ustar, ps
    REAL, DIMENSION(1, 1) :: g_z0, g_pblz, g_ustar
    REAL :: dvel(1, 1), drydf(1, 1)
    REAL :: g_dvel(1, 1)
    LOGICAL :: highnh3, rainflag, vegflag, wetflag
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER :: min2
    INTEGER :: min3
    INTEGER :: max2
    INTEGER :: max3
    DO nv=numgas+1,num_chem
      DO j=jts,jte
        DO i=its,ite
          g_ddvel(i, j, nv) = 0.0_8
          ddvel(i, j, nv) = 0.
        END DO
      END DO
    END DO
    imx = 1
    jmx = 1
    lmx = 1
    IF (jds + 1 .LT. jts) THEN
      max3 = jts
    ELSE
      max3 = jds + 1
    END IF
    IF (jde - 1 .GT. jte) THEN
      min3 = jte
    ELSE
      min3 = jde - 1
    END IF
    g_ustar = 0.0_8
    g_z0 = 0.0_8
    g_dvel = 0.0_8
    g_pblz = 0.0_8
    DO j=max3,min3
      IF (ids + 1 .LT. its) THEN
        max2 = its
      ELSE
        max2 = ids + 1
      END IF
      IF (ide - 1 .GT. ite) THEN
        min2 = ite
      ELSE
        min2 = ide - 1
      END IF
      DO i=max2,min2
        ipr = 0
        g_dvel(1, 1) = 0.0_8
        dvel(1, 1) = 0._8
        IF (xland(i, j) .GT. 1.5) THEN
          ilwi(1, 1) = 1
        ELSE
          ilwi(1, 1) = 0
        END IF
! for aerosols, ii=1 or ii=2
        ii = 1
!     if(ivgtyp(i,j).eq.19.or.ivgtyp(i,j).eq.23)ii=1
        ireg(1, 1) = 1
        airden(1, 1) = rho_phy(i, kts, j)
        delz_sfc(1, 1) = dz8w(i, kts, j)
        IF (1.e-1_8 .LT. ust(i, j)) THEN
          g_ustar(1, 1) = g_ust(i, j)
          ustar(1, 1) = ust(i, j)
        ELSE
          g_ustar(1, 1) = 0.0_8
          ustar(1, 1) = 1.D-1
        END IF
        hflux(1, 1) = hfx(i, j)
        g_pblz(1, 1) = g_pbl(i, j)
        pblz(1, 1) = pbl(i, j)
        ps(1, 1) = p8w(i, kts, j)*.01_8
        g_z0(1, 1) = g_znt(i, j)
        z0(1, 1) = znt(i, j)
        ts(1, 1) = tsk(i, j)
!    if(i.eq.23.and.j.eq.74)ipr=1
        CALL G_DEPVEL_GOCART(config_flags, ipr, ii, imx, jmx, lmx, &
&                       airden, delz_sfc, pblz, g_pblz, ts, ustar, &
&                       g_ustar, hflux, ilwi, ps, z0, g_z0, dvel, g_dvel&
&                       , drydf, g, rmol(i, j), g_rmol(i, j), aer_res(i, &
&                       j), g_aer_res(i, j))
!!        DO nv=p_p25,num_chem
!!          g_ddvel(i, j, nv) = g_dvel(1, 1)
!!          ddvel(i, j, nv) = dvel(1, 1)
!!        END DO
        DO nv = max(numgas+1,2),num_chem
          g_ddvel(i, j, nv) = g_dvel(1, 1)
          ddvel(i, j, nv) = dvel(1, 1)
        END DO
        IF (p_sulf .gt. 0) g_ddvel(i, j, p_sulf) = g_dvel(1, 1)
        IF (p_sulf .gt. 0) ddvel(i, j, p_sulf) = dvel(1, 1)
        IF (p_msa .gt. 0) g_ddvel(i, j, p_msa) = g_dvel(1, 1)
        IF (p_msa .gt. 0) ddvel(i, j, p_msa) = dvel(1, 1)
      END DO
    END DO
  END SUBROUTINE G_GOCART_DRYDEP_DRIVER

!  Differentiation of depvel_gocart in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: dvel
!   with respect to varying inputs: ustar z0 aer_res dvel pblz
!                rmol
  SUBROUTINE G_DEPVEL_GOCART(config_flags, ipr, ii, imx, jmx, lmx, &
&    airden, delz_sfc, pblz, g_pblz, ts, ustar, g_ustar, hflux, ilwi, ps&
&    , z0, g_z0, dvel, g_dvel, drydf, g0, rmol, g_rmol, aer_res, &
&    g_aer_res)

! ****************************************************************************
! *                                                                          *
! *  Calculate dry deposition velocity.                                      *
! *                                                                          *
! *  Input variables:                                                        *
! *    AEROSOL(k)      - Logical, T = aerosol species, F = gas species       *
! *    IREG(i,j)       - # of landtypes in grid square                       *
! *    ILAND(i,j,ldt)  - Land type ID for element ldt =1,IREG(i,j)           *
! *    IUSE(i,j,ldt)   - Fraction of gridbox area occupied by land type      *
! *                      element ldt                                         *
! *    USTAR(i,j)      - Friction velocity (m s-1)                           *
! *    DELZ_SFC(i,j)   - Thickness of layer above surface                    *
! *    PBLZ(i,j)       - Mixing depth (m)                                    *
! *    Z0(i,j)         - Roughness height (m)                                *
! *                                                                          *
! *  Determined in this subroutine (local):                                  *
! *    OBK             - Monin-Obukhov length (m): set to 1.E5 m under       *
! *                      neutral conditions                                  *
! *    Rs(ldt)         - Bulk surface resistance(s m-1) for species k to     * 
! *                      surface ldt                                         *
! *    Ra              - Aerodynamic resistance.                             *
! *    Rb              - Sublayer resistance.                                *
! *    Rs              - Surface resistance.                                 *
! *    Rttl            - Total deposition resistance (s m-1) for species k   *
! *                      Rttl(k) = Ra + Rb + Rs.                             *
! *                                                                          *
! *  Returned:                                                               *
! *    DVEL(i,j,k)     - Deposition velocity (m s-1) of species k            *
! *    DRYDf(i,j,k)    - Deposition frequency (s-1) of species k,            *
! *                    = DVEL / DELZ_SFC                                     *
! *                                                                          *
! ****************************************************************************

    USE module_configure

    IMPLICIT NONE

    INTEGER, INTENT(IN) :: imx, jmx, lmx
    REAL*8, INTENT(IN) :: airden(imx, jmx), delz_sfc(imx, jmx)
    REAL*8, INTENT(IN) :: hflux(imx, jmx), ts(imx, jmx)
    REAL*8, INTENT(IN) :: ustar(imx, jmx), pblz(imx, jmx)
    REAL*8, INTENT(IN) :: g_ustar(imx, jmx), g_pblz(imx, jmx)
    REAL*8, INTENT(IN) :: ps(imx, jmx)
    INTEGER, INTENT(IN) :: ilwi(imx, jmx)
    REAL*8, INTENT(IN) :: z0(imx, jmx)
    REAL*8, INTENT(IN) :: g_z0(imx, jmx)
    REAL, INTENT(IN) :: g0, rmol, aer_res
    REAL, INTENT(IN) :: g_rmol, g_aer_res
    REAL*8, INTENT(OUT) :: dvel(imx, jmx), drydf(imx, jmx)
    REAL*8, INTENT(OUT) :: g_dvel(imx, jmx)
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    REAL*8 :: obk, vds, czh, rttl, frac, logmfrac, psi_h, cz, eps
    REAL*8 :: g_obk, g_vds, g_czh, g_rttl, g_frac, g_logmfrac, g_psi_h, &
&    g_eps
    REAL*8 :: vd, ra, rb, rs
    REAL*8 :: g_vd, g_ra, g_rs
    INTEGER :: ipr, i, j, k, ldt, iolson, ii
    CHARACTER(len=50) :: msg
    REAL*8 :: prss, tempk, tempc, xnu, ckustr, reyno, aird, diam, xm, z
    REAL*8 :: frpath, speed, dg, dw, rt
    REAL*8 :: rad0, rix, gfact, gfaci, rdc, rixx, rluxx, rgsx, rclx
    REAL*8 :: dtmp1, dtmp2, dtmp3, dtmp4
    REAL*8 :: biofit, vk
    REAL*8 :: arg1
    REAL*8 :: g_arg1
    INTRINSIC EXP
    REAL*8 :: min2
    REAL*8 :: g_y1
    REAL*8 :: g_min2
    INTRINSIC LOG
    REAL*8 :: abs0
    REAL*8 :: y1
    g_psi_h = 0.0_8
! executable statements
j_loop:DO j=1,jmx
i_loop:DO i=1,imx
        vk = .4_8
        vd = 0._8
        ra = 0._8
! only required for gases (SO2)
        rb = 0._8
        rs = 0.0_8
        IF (hflux(i, j) .GE. 0.) THEN
          abs0 = hflux(i, j)
        ELSE
          abs0 = -hflux(i, j)
        END IF
! ****************************************************************************
! *  Compute the the Monin-Obhukov length.                                   *
! *  The direct computation of the Monin-Obhukov length is:                  *
! *                                                                          *
! *           - Air density * Cp * T(surface air) * Ustar^3                  *
! *   OBK =   ----------------------------------------------                 *
! *                    vK   * g  * Sensible Heat flux                        *
! *                                                                          *
! *    Cp = 1000 J/kg/K    = specific heat at constant pressure              *
! *    vK = 0.4            = von Karman's constant                           *
! ****************************************************************************
        IF (abs0 .LE. 1.D-5) THEN
          obk = 1.0D5
        ELSE
! MINVAL(hflux), MINVAL(airden), MINVAL(ustar) =??
          obk = -(airden(i, j)*1000.0_8*ts(i, j)*ustar(i, j)**3/(vk*g0*&
&            hflux(i, j)))
        END IF
        IF (rmol .NE. 0.D0) THEN
          g_obk = -(g_rmol/rmol**2)
          obk = 1.0_8/rmol
        ELSE
          obk = 1.D5
          g_obk = 0.0_8
        END IF
!       cz = delz_sfc(i,j) / 2.0_8 ! center of the grid box above surface
        cz = 2.0_8
! ****************************************************************************
! *  (1) Aerosodynamic resistance Ra and sublayer resistance Rb.             *
! *                                                                          *
! *  The Reynolds number REYNO diagnoses whether a surface is                *
! *  aerodynamically rough (REYNO > 10) or smooth.  Surface is               *
! *  rough in all cases except over water with low wind speeds.              *
! *                                                                          *
! *  For gas species over land and ice (REYNO >= 10) and for aerosol         *
! *  species for all surfaces:                                               *
! *                                                                          *
! *      Ra = 1./VT          (VT from GEOS Kzz at L=1, m/s).                 *
! *                                                                          *
! *  The following equations are from Walcek et al, 1986:                    *
! *                                                                          *
! *  For gas species when REYNO < 10 (smooth), Ra and Rb are combined        *
! *  as Ra:                                                                  *
! *                                                                          *
! *      Ra = { ln(ku* z1/Dg) - Sh } / ku*           eq.(13)                 *
! *                                                                          *
! *      where z1 is the altitude at the center of the lowest model layer    *
! *               (CZ);                                                      *
! *            Sh is a stability correction function;                        *
! *            k  is the von Karman constant (0.4, vK);                      *
! *            u* is the friction velocity (USTAR).                          *
! *                                                                          *
! *   Sh is computed as a function of z1 and L       eq ( 4) and (5)):       *
! *                                                                          *
! *    0 < z1/L <= 1:     Sh = -5 * z1/L                                     *
! *    z1/L < 0:          Sh = exp{ 0.598 + 0.39*ln(E) - 0.09(ln(E))^2 }     *
! *                       where E = min(1,-z1/L) (Balkanski, thesis).        *
! *                                                                          *
! *   For gas species when REYNO >= 10,                                      *
! *                                                                          *
! *      Rb = 2/ku* (Dair/Dg)**(2/3)                 eq.(12)                 *
! *      where Dg is the gas diffusivity, and                                *
! *            Dair is the air diffusivity.                                  *
! *                                                                          *
! *  For aerosol species, Rb is combined with surface resistance as Rs.      *
! *                                                                          *
! ****************************************************************************
        g_frac = -(cz*g_obk/obk**2)
        frac = cz/obk
        IF (frac .GT. 1.0D0) THEN
          frac = 1.0D0
          g_frac = 0.0D0
        END IF
        IF (frac .GT. 0.0D0 .AND. frac .LE. 1.0D0) THEN
          g_psi_h = -(5.0D0*g_frac)
          psi_h = -(5.0D0*frac)
        ELSE IF (frac .LT. 0.0D0) THEN
          IF (1.0D0 .GT. -frac) THEN
            g_eps = -g_frac
            eps = -frac
          ELSE
            eps = 1.0D0
            g_eps = 0.0D0
          END IF
          g_logmfrac = g_eps/eps
          logmfrac = LOG(eps)
          g_arg1 = 0.39D0*g_logmfrac - 0.09D0*2*logmfrac*g_logmfrac
          arg1 = 0.598D0 + 0.39D0*logmfrac - 0.09D0*logmfrac**2
          g_psi_h = g_arg1*EXP(arg1)
          psi_h = EXP(arg1)
        END IF
!--------------------------------------------------------------
!  Aerosol species, Rs here is the combination of Rb and Rs.
        g_ra = ((-(g_z0(i, j)/z0(i, j))-g_psi_h)*vk*ustar(i, j)-(LOG(cz/&
&          z0(i, j))-psi_h)*vk*g_ustar(i, j))/(vk*ustar(i, j))**2
        ra = (LOG(cz/z0(i, j))-psi_h)/(vk*ustar(i, j))
        g_vds = 0.002D0*g_ustar(i, j)
        vds = 0.002D0*ustar(i, j)
        IF (obk .LT. 0.0D0) THEN
          g_vds = g_vds*(1.0D0+(-(300.0D0/obk))**0.6667D0) + vds*&
&            0.6667D0*(-(300.0D0/obk))**(-0.3333D0)*300.0D0*g_obk/obk**2
          vds = vds*(1.0D0+(-(300.0D0/obk))**0.6667D0)
        END IF
        g_czh = (g_pblz(i, j)*obk-pblz(i, j)*g_obk)/obk**2
        czh = pblz(i, j)/obk
        IF (czh .LT. -30.0D0) THEN
          g_vds = 0.0009D0*(g_ustar(i, j)*(-czh)**0.6667D0-ustar(i, j)*&
&            0.6667D0*(-czh)**(-0.3333D0)*g_czh)
          vds = 0.0009D0*ustar(i, j)*(-czh)**0.6667D0
        END IF
        IF (config_flags%chem_opt .NE. chem_vash .AND. config_flags%&
&            chem_opt .NE. dust) THEN
          g_ra = g_aer_res
          ra = aer_res
        END IF
        IF (vds .GT. 2.0D-3) THEN
          min2 = 2.0D-3
          g_min2 = 0.0D0
        ELSE
          g_min2 = g_vds
          min2 = vds
        END IF
! --Set Vds to be less than VDSMAX (entry in input file divided --
!   by 1.E4). VDSMAX is taken from Table 2 of Walcek et al. [1986].
!   Invert to get corresponding R
!          if(ii.eq.1) then
!             rs=1.0_8/MIN(vds,2.0e-2_8)
!          else
        g_rs = -(g_min2/min2**2)
        rs = 1.0D0/min2
        IF (rs .GT. 9.9990D3) THEN
          y1 = 9.9990D3
          g_y1 = 0.0D0
        ELSE
          g_y1 = g_rs
          y1 = rs
        END IF
        IF (1.0D0 .LT. y1) THEN
          g_rs = g_y1
          rs = y1
        ELSE
          rs = 1.0_8
          g_rs = 0.0_8
        END IF
! ****************************************************************************
! *                                                                          *
! *  Compute dry deposition velocity.                                        *
! *                                                                          *
! *  IUSE is the fraction of the grid square occupied by surface ldt in      *
! *  units of per mil (IUSE=500 -> 50% of the grid square).  Add the         *
! *  contribution of surface type ldt to the deposition velocity; this is    *
! *  a loop over all surface types in the gridbox.                           *
! *                                                                          *
! *  Total resistance = Ra + Rb + Rs.
! *                                                                          *
! ****************************************************************************

        g_rttl = g_ra + g_rs
        rttl = ra + rb + rs
        g_vd = -(g_rttl/rttl**2)
        vd = vd + 1.D0/rttl

        g_dvel(i, j) = g_vd
        dvel(i, j) = vd
! -- Set a minimum value for DVEL
!    MIN(VdSO2)      = 2.0e-3 m/s  over ice
!                    = 3.0e-3 m/s  over land
!    MIN(vd_aerosol) = 1.0e-4 m/s
        IF (dvel(i, j) .LT. 1.0D-4) THEN
          g_dvel(i, j) = 0.0_8
          dvel(i, j) = 1.0D-4
        END IF
        drydf(i, j) = dvel(i, j)/delz_sfc(i, j)
      END DO i_loop
    END DO j_loop
  END SUBROUTINE G_DEPVEL_GOCART
END MODULE G_MODULE_GOCART_DRYDEP
