!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
MODULE a_module_gocart_chem
  USE module_gocart_chem, ONLY: szangle, chmdrv_su, chem_dms, chem_so2, chem_so4

  IMPLICIT NONE

CONTAINS
!  Differentiation of gocart_chem_driver in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: chem
!   with respect to varying inputs: t_phy rho_phy chem
  SUBROUTINE a_gocart_chem_driver(curr_secs, dt, config_flags, gmt, &
&    julday, t_phy, a_t_phy, moist, chem, a_chem, rho_phy, a_rho_phy, &
&    dz8w, p8w, backg_oh, backg_h2o2, backg_no3, gd_cldf, dx, g, xlat, &
&    xlong, ttday, tcosz, ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte)
    USE module_configure
    USE module_state_description
    IMPLICIT NONE
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER, INTENT(IN) :: julday, ids, ide, jds, jde, kds, kde, ims, &
&    ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist), INTENT(IN) ::&
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: a_chem
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: xlat, xlong, ttday&
&    , tcosz
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), OPTIONAL, INTENT(IN) :: &
&    gd_cldf
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: t_phy, &
&    backg_oh, backg_h2o2, backg_no3, dz8w, p8w, rho_phy
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_t_phy, a_rho_phy
    REAL(kind=8), INTENT(IN) :: curr_secs
    REAL, INTENT(IN) :: dt, dx, g, gmt
    INTEGER :: nmx, i, j, k, imx, jmx, lmx
    REAL*8, DIMENSION(1, 1, 1) :: tmp, airden, airmas, oh, xno3, h2o2, &
&    chldms_oh, chldms_no3, chldms_x, chpso2, chpmsa, chpso4, chlso2_oh, &
&    chlso2_aq, cldf
    REAL*8, DIMENSION(1, 1, 1) :: a_tmp, a_airden, a_oh, a_xno3, a_h2o2
    REAL*8, DIMENSION(1, 1, 4) :: tdry
    REAL*8, DIMENSION(1, 1) :: cossza
    REAL, DIMENSION(1, 1) :: sza, cosszax
    REAL*8, DIMENSION(1, 1, 1, 4) :: tc, bems
    REAL*8, DIMENSION(1, 1, 1, 4) :: a_tc
    REAL*8, DIMENSION(1) :: dxy
    REAL(kind=8) :: xtime, xhour
    REAL :: rlat, xlonn
    REAL :: zenith, zenita, azimuth, xmin, xtimin, gmtp
    INTEGER(kind=8) :: ixhour
    REAL(kind=8) :: arg1
    REAL*8 :: result1
    INTEGER :: branch
    imx = 1
    jmx = 1
    lmx = 1
    nmx = 4
    xtime = curr_secs/60._8
    ixhour = INT(gmt + .01, 8) + INT(xtime/60._8, 8)
    xhour = REAL(ixhour, 8)
    arg1 = xtime - xhour*60._8
    result1 = REAL(arg1, 8)
    xmin = 60.*gmt + result1
    gmtp = MOD(xhour, 24._8)
    gmtp = gmtp + xmin/60.
    SELECT CASE  (config_flags%chem_opt) 
    CASE (gocart_simple) 
      DO j=jts,jte
        DO i=its,ite
          rlat = xlat(i, j)*3.1415926535590/180.
          xlonn = xlong(i, j)
          CALL SZANGLE(1, 1, julday, gmtp, sza, cosszax, xlonn, rlat)
          CALL PUSHREAL8(cossza(1, 1))
          cossza(1, 1) = cosszax(1, 1)
          DO k=kts,kte-1
            chldms_oh = 0.
            chldms_no3 = 0.
            chldms_x = 0.
            chpso2 = 0.
            chpmsa = 0.
            chpso4 = 0.
            chlso2_oh = 0.
            chlso2_aq = 0.
            IF (PRESENT(gd_cldf)) THEN
              CALL PUSHREAL8(cldf(1, 1, 1))
              cldf(1, 1, 1) = gd_cldf(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHREAL8(cldf(1, 1, 1))
              cldf(1, 1, 1) = 0.
              CALL PUSHCONTROL1B(1)
            END IF
            IF (p_qc .GT. 1 .AND. p_qi .GT. 1) THEN
              IF (moist(i, k, j, p_qc) .GT. 0 .OR. moist(i, k, j, p_qi) &
&                  .GT. 0.) THEN
                CALL PUSHREAL8(cldf(1, 1, 1))
                cldf(1, 1, 1) = 1.
                CALL PUSHCONTROL3B(0)
              ELSE
                CALL PUSHCONTROL3B(1)
              END IF
            ELSE IF (p_qc .GT. 1 .AND. p_qi .LE. 1) THEN
              IF (moist(i, k, j, p_qc) .GT. 0.) THEN
                CALL PUSHREAL8(cldf(1, 1, 1))
                cldf(1, 1, 1) = 1.
                CALL PUSHCONTROL3B(2)
              ELSE
                CALL PUSHCONTROL3B(3)
              END IF
            ELSE
              CALL PUSHCONTROL3B(4)
            END IF
            tc(1, 1, 1, 1) = chem(i, k, j, p_dms)*1.d-6
            tc(1, 1, 1, 2) = chem(i, k, j, p_so2)*1.d-6
            tc(1, 1, 1, 3) = chem(i, k, j, p_sulf)*1.d-6
            tc(1, 1, 1, 4) = chem(i, k, j, p_msa)*1.d-6
            CALL PUSHREAL8(airmas(1, 1, 1))
            airmas(1, 1, 1) = -((p8w(i, k+1, j)-p8w(i, k, j))*dx*dx/g)
            CALL PUSHREAL8(airden(1, 1, 1))
            airden(1, 1, 1) = rho_phy(i, k, j)
            CALL PUSHREAL8(tmp(1, 1, 1))
            tmp(1, 1, 1) = t_phy(i, k, j)
            CALL PUSHREAL8(oh(1, 1, 1))
            oh(1, 1, 1) = 86400./dt*cossza(1, 1)*backg_oh(i, k, j)/tcosz&
&              (i, j)
            h2o2(1, 1, 1) = backg_h2o2(i, k, j)
            IF (cossza(1, 1) .GT. 0.0) THEN
              CALL PUSHREAL8(xno3(1, 1, 1))
              xno3(1, 1, 1) = 0.0
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHREAL8(xno3(1, 1, 1))
              xno3(1, 1, 1) = backg_no3(i, k, j)/(1.0-ttday(i, j)/86400.&
&                )
              CALL PUSHCONTROL1B(1)
            END IF
            CALL PUSHREAL8ARRAY(chlso2_aq, 1)
            CALL PUSHREAL8ARRAY(chlso2_oh, 1)
            CALL PUSHREAL8ARRAY(chpso4, 1)
            CALL PUSHREAL8ARRAY(chpmsa, 1)
            CALL PUSHREAL8ARRAY(chpso2, 1)
            CALL PUSHREAL8ARRAY(chldms_x, 1)
            CALL PUSHREAL8ARRAY(chldms_no3, 1)
            CALL PUSHREAL8ARRAY(chldms_oh, 1)
            CALL PUSHREAL8ARRAY(tc, 4)
            CALL PUSHREAL8ARRAY(h2o2, 1)
            CALL CHMDRV_SU(imx, jmx, lmx, nmx, dt, tmp, airden, airmas, &
&                     oh, xno3, h2o2, cldf, tc, tdry, cossza, chldms_oh, &
&                     chldms_no3, chldms_x, chpso2, chpmsa, chpso4, &
&                     chlso2_oh, chlso2_aq)
          END DO
        END DO
      END DO
      a_h2o2 = 0.0_8
      a_tmp = 0.0_8
      a_airden = 0.0_8
      a_tc = 0.0_8
      DO j=jte,jts,-1
        DO i=ite,its,-1
          DO k=kte-1,kts,-1
            a_tc(1, 1, 1, 4) = a_tc(1, 1, 1, 4) + 1.e6*a_chem(i, k, j, &
&              p_msa)
            a_chem(i, k, j, p_msa) = 0.0_8
            a_tc(1, 1, 1, 3) = a_tc(1, 1, 1, 3) + 1.e6*a_chem(i, k, j, &
&              p_sulf)
            a_chem(i, k, j, p_sulf) = 0.0_8
            a_tc(1, 1, 1, 2) = a_tc(1, 1, 1, 2) + 1.e6*a_chem(i, k, j, &
&              p_so2)
            a_chem(i, k, j, p_so2) = 0.0_8
            a_tc(1, 1, 1, 1) = a_tc(1, 1, 1, 1) + 1.e6*a_chem(i, k, j, &
&              p_dms)
            a_chem(i, k, j, p_dms) = 0.0_8
            CALL POPREAL8ARRAY(h2o2, 1)
            CALL POPREAL8ARRAY(tc, 4)
            CALL POPREAL8ARRAY(chldms_oh, 1)
            CALL POPREAL8ARRAY(chldms_no3, 1)
            CALL POPREAL8ARRAY(chldms_x, 1)
            CALL POPREAL8ARRAY(chpso2, 1)
            CALL POPREAL8ARRAY(chpmsa, 1)
            CALL POPREAL8ARRAY(chpso4, 1)
            CALL POPREAL8ARRAY(chlso2_oh, 1)
            CALL POPREAL8ARRAY(chlso2_aq, 1)
            a_oh = 0.0_8
            a_xno3 = 0.0_8
            CALL A_CHMDRV_SU(imx, jmx, lmx, nmx, dt, tmp, a_tmp, airden&
&                       , a_airden, airmas, oh, a_oh, xno3, a_xno3, h2o2&
&                       , a_h2o2, cldf, tc, a_tc, tdry, cossza, chldms_oh&
&                       , chldms_no3, chldms_x, chpso2, chpmsa, chpso4, &
&                       chlso2_oh, chlso2_aq)
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(xno3(1, 1, 1))
            ELSE
              CALL POPREAL8(xno3(1, 1, 1))
            END IF
            a_h2o2(1, 1, 1) = 0.0_8
            CALL POPREAL8(oh(1, 1, 1))
            CALL POPREAL8(tmp(1, 1, 1))
            a_t_phy(i, k, j) = a_t_phy(i, k, j) + a_tmp(1, 1, 1)
            a_tmp(1, 1, 1) = 0.0_8
            CALL POPREAL8(airden(1, 1, 1))
            a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + a_airden(1, 1, 1)
            a_airden(1, 1, 1) = 0.0_8
            CALL POPREAL8(airmas(1, 1, 1))
            a_chem(i, k, j, p_msa) = a_chem(i, k, j, p_msa) + 1.d-6*a_tc&
&              (1, 1, 1, 4)
            a_tc(1, 1, 1, 4) = 0.0_8
            a_chem(i, k, j, p_sulf) = a_chem(i, k, j, p_sulf) + 1.d-6*&
&              a_tc(1, 1, 1, 3)
            a_tc(1, 1, 1, 3) = 0.0_8
            a_chem(i, k, j, p_so2) = a_chem(i, k, j, p_so2) + 1.d-6*a_tc&
&              (1, 1, 1, 2)
            a_tc(1, 1, 1, 2) = 0.0_8
            a_chem(i, k, j, p_dms) = a_chem(i, k, j, p_dms) + 1.d-6*a_tc&
&              (1, 1, 1, 1)
            a_tc(1, 1, 1, 1) = 0.0_8
            CALL POPCONTROL3B(branch)
            IF (branch .LT. 2) THEN
              IF (branch .EQ. 0) CALL POPREAL8(cldf(1, 1, 1))
            ELSE IF (branch .EQ. 2) THEN
              CALL POPREAL8(cldf(1, 1, 1))
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(cldf(1, 1, 1))
            ELSE
              CALL POPREAL8(cldf(1, 1, 1))
            END IF
          END DO
          CALL POPREAL8(cossza(1, 1))
        END DO
      END DO
    CASE (gocartracm_kpp, gocartradm2) 
      DO j=jts,jte
        DO i=its,ite
          rlat = xlat(i, j)*3.1415926535590/180.
          xlonn = xlong(i, j)
          CALL SZANGLE(1, 1, julday, gmtp, sza, cosszax, xlonn, rlat)
          CALL PUSHREAL8(cossza(1, 1))
          cossza(1, 1) = cosszax(1, 1)
          DO k=kts,kte-1
            chldms_oh = 0.
            chldms_no3 = 0.
            chldms_x = 0.
            chpso2 = 0.
            chpmsa = 0.
            chpso4 = 0.
            chlso2_oh = 0.
            chlso2_aq = 0.
            IF (PRESENT(gd_cldf)) THEN
              CALL PUSHREAL8(cldf(1, 1, 1))
              cldf(1, 1, 1) = gd_cldf(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHREAL8(cldf(1, 1, 1))
              cldf(1, 1, 1) = 0.
              CALL PUSHCONTROL1B(1)
            END IF
            IF (p_qi .GT. 1) THEN
              IF (moist(i, k, j, p_qc) .GT. 0 .OR. moist(i, k, j, p_qi) &
&                  .GT. 0.) THEN
                CALL PUSHREAL8(cldf(1, 1, 1))
                cldf(1, 1, 1) = 1.
                CALL PUSHCONTROL3B(0)
              ELSE
                CALL PUSHCONTROL3B(1)
              END IF
            ELSE IF (p_qc .GT. 1) THEN
              IF (moist(i, k, j, p_qc) .GT. 0.) THEN
                CALL PUSHREAL8(cldf(1, 1, 1))
                cldf(1, 1, 1) = 1.
                CALL PUSHCONTROL3B(2)
              ELSE
                CALL PUSHCONTROL3B(3)
              END IF
            ELSE
              CALL PUSHCONTROL3B(4)
            END IF
            tc(1, 1, 1, 1) = chem(i, k, j, p_dms)*1.d-6
            tc(1, 1, 1, 2) = chem(i, k, j, p_so2)*1.d-6
            tc(1, 1, 1, 3) = chem(i, k, j, p_sulf)*1.d-6
            tc(1, 1, 1, 4) = chem(i, k, j, p_msa)*1.d-6
            CALL PUSHREAL8(airmas(1, 1, 1))
            airmas(1, 1, 1) = -((p8w(i, k+1, j)-p8w(i, k, j))*dx*dx/g)
            CALL PUSHREAL8(airden(1, 1, 1))
            airden(1, 1, 1) = rho_phy(i, k, j)
            CALL PUSHREAL8(tmp(1, 1, 1))
            tmp(1, 1, 1) = t_phy(i, k, j)
            CALL PUSHREAL8(oh(1, 1, 1))
            oh(1, 1, 1) = chem(i, k, j, p_ho)*1.d-6
            h2o2(1, 1, 1) = chem(i, k, j, p_h2o2)*1.d-6
            CALL PUSHREAL8(xno3(1, 1, 1))
            xno3(1, 1, 1) = chem(i, k, j, p_no3)*1.d-6
            IF (cossza(1, 1) .GT. 0.0) THEN
              CALL PUSHREAL8(xno3(1, 1, 1))
              xno3(1, 1, 1) = 0.
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
            CALL PUSHREAL8ARRAY(chlso2_aq, 1)
            CALL PUSHREAL8ARRAY(chlso2_oh, 1)
            CALL PUSHREAL8ARRAY(chpso4, 1)
            CALL PUSHREAL8ARRAY(chpmsa, 1)
            CALL PUSHREAL8ARRAY(chpso2, 1)
            CALL PUSHREAL8ARRAY(chldms_x, 1)
            CALL PUSHREAL8ARRAY(chldms_no3, 1)
            CALL PUSHREAL8ARRAY(chldms_oh, 1)
            CALL PUSHREAL8ARRAY(tc, 4)
            CALL PUSHREAL8ARRAY(h2o2, 1)
            CALL CHMDRV_SU(imx, jmx, lmx, nmx, dt, tmp, airden, airmas, &
&                     oh, xno3, h2o2, cldf, tc, tdry, cossza, chldms_oh, &
&                     chldms_no3, chldms_x, chpso2, chpmsa, chpso4, &
&                     chlso2_oh, chlso2_aq)
          END DO
        END DO
      END DO
      a_h2o2 = 0.0_8
      a_xno3 = 0.0_8
      a_oh = 0.0_8
      a_tmp = 0.0_8
      a_airden = 0.0_8
      a_tc = 0.0_8
      DO j=jte,jts,-1
        DO i=ite,its,-1
          DO k=kte-1,kts,-1
            a_h2o2(1, 1, 1) = a_h2o2(1, 1, 1) + 1.e6*a_chem(i, k, j, &
&              p_h2o2)
            a_chem(i, k, j, p_h2o2) = 0.0_8
            a_tc(1, 1, 1, 4) = a_tc(1, 1, 1, 4) + 1.e6*a_chem(i, k, j, &
&              p_msa)
            a_chem(i, k, j, p_msa) = 0.0_8
            a_tc(1, 1, 1, 3) = a_tc(1, 1, 1, 3) + 1.e6*a_chem(i, k, j, &
&              p_sulf)
            a_chem(i, k, j, p_sulf) = 0.0_8
            a_tc(1, 1, 1, 2) = a_tc(1, 1, 1, 2) + 1.e6*a_chem(i, k, j, &
&              p_so2)
            a_chem(i, k, j, p_so2) = 0.0_8
            a_tc(1, 1, 1, 1) = a_tc(1, 1, 1, 1) + 1.e6*a_chem(i, k, j, &
&              p_dms)
            a_chem(i, k, j, p_dms) = 0.0_8
            CALL POPREAL8ARRAY(h2o2, 1)
            CALL POPREAL8ARRAY(tc, 4)
            CALL POPREAL8ARRAY(chldms_oh, 1)
            CALL POPREAL8ARRAY(chldms_no3, 1)
            CALL POPREAL8ARRAY(chldms_x, 1)
            CALL POPREAL8ARRAY(chpso2, 1)
            CALL POPREAL8ARRAY(chpmsa, 1)
            CALL POPREAL8ARRAY(chpso4, 1)
            CALL POPREAL8ARRAY(chlso2_oh, 1)
            CALL POPREAL8ARRAY(chlso2_aq, 1)
            CALL A_CHMDRV_SU(imx, jmx, lmx, nmx, dt, tmp, a_tmp, airden&
&                       , a_airden, airmas, oh, a_oh, xno3, a_xno3, h2o2&
&                       , a_h2o2, cldf, tc, a_tc, tdry, cossza, chldms_oh&
&                       , chldms_no3, chldms_x, chpso2, chpmsa, chpso4, &
&                       chlso2_oh, chlso2_aq)
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(xno3(1, 1, 1))
              a_xno3(1, 1, 1) = 0.0_8
            END IF
            CALL POPREAL8(xno3(1, 1, 1))
            a_chem(i, k, j, p_no3) = a_chem(i, k, j, p_no3) + 1.d-6*&
&              a_xno3(1, 1, 1)
            a_xno3(1, 1, 1) = 0.0_8
            a_chem(i, k, j, p_h2o2) = a_chem(i, k, j, p_h2o2) + 1.d-6*&
&              a_h2o2(1, 1, 1)
            a_h2o2(1, 1, 1) = 0.0_8
            CALL POPREAL8(oh(1, 1, 1))
            a_chem(i, k, j, p_ho) = a_chem(i, k, j, p_ho) + 1.d-6*a_oh(1&
&              , 1, 1)
            a_oh(1, 1, 1) = 0.0_8
            CALL POPREAL8(tmp(1, 1, 1))
            a_t_phy(i, k, j) = a_t_phy(i, k, j) + a_tmp(1, 1, 1)
            a_tmp(1, 1, 1) = 0.0_8
            CALL POPREAL8(airden(1, 1, 1))
            a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + a_airden(1, 1, 1)
            a_airden(1, 1, 1) = 0.0_8
            CALL POPREAL8(airmas(1, 1, 1))
            a_chem(i, k, j, p_msa) = a_chem(i, k, j, p_msa) + 1.d-6*a_tc&
&              (1, 1, 1, 4)
            a_tc(1, 1, 1, 4) = 0.0_8
            a_chem(i, k, j, p_sulf) = a_chem(i, k, j, p_sulf) + 1.d-6*&
&              a_tc(1, 1, 1, 3)
            a_tc(1, 1, 1, 3) = 0.0_8
            a_chem(i, k, j, p_so2) = a_chem(i, k, j, p_so2) + 1.d-6*a_tc&
&              (1, 1, 1, 2)
            a_tc(1, 1, 1, 2) = 0.0_8
            a_chem(i, k, j, p_dms) = a_chem(i, k, j, p_dms) + 1.d-6*a_tc&
&              (1, 1, 1, 1)
            a_tc(1, 1, 1, 1) = 0.0_8
            CALL POPCONTROL3B(branch)
            IF (branch .LT. 2) THEN
              IF (branch .EQ. 0) CALL POPREAL8(cldf(1, 1, 1))
            ELSE IF (branch .EQ. 2) THEN
              CALL POPREAL8(cldf(1, 1, 1))
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(cldf(1, 1, 1))
            ELSE
              CALL POPREAL8(cldf(1, 1, 1))
            END IF
          END DO
          CALL POPREAL8(cossza(1, 1))
        END DO
      END DO
    CASE DEFAULT
    END SELECT
  END SUBROUTINE a_gocart_chem_driver

!  Differentiation of chmdrv_su in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: h2o2 xno3 oh tmp airden tc
!   with respect to varying inputs: h2o2 xno3 oh tmp airden tc
  SUBROUTINE A_CHMDRV_SU(imx, jmx, lmx, nmx, dt1, tmp, a_tmp, airden, &
&    a_airden, airmas, oh, a_oh, xno3, a_xno3, h2o2, a_h2o2, cldf, tc, &
&    a_tc, tdry, cossza, chldms_oh, chldms_no3, chldms_x, chpso2, chpmsa&
&    , chpso4, chlso2_oh, chlso2_aq)
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: nmx, imx, jmx, lmx
    INTEGER :: ndt1
    REAL, INTENT(IN) :: dt1
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: tmp, airden, airmas
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_tmp, a_airden
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: oh, xno3, cldf
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_oh, a_xno3
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: h2o2
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: a_h2o2
    REAL*8, INTENT(INOUT) :: tc(imx, jmx, lmx, nmx)
    REAL*8 :: a_tc(imx, jmx, lmx, nmx)
    REAL*8, INTENT(INOUT) :: tdry(imx, jmx, nmx)
    REAL*8, DIMENSION(imx, jmx), INTENT(IN) :: cossza
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chldms_oh, &
&    chldms_no3
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chldms_x, chpso2&
&    , chpmsa
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chpso4, chlso2_oh&
&    , chlso2_aq
    REAL*8, DIMENSION(imx, jmx, lmx) :: pso2_dms, pmsa_dms, pso4_so2
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_pso2_dms, a_pmsa_dms, &
&    a_pso4_so2
    ndt1 = IFIX(dt1)
    IF (ndt1 .LE. 0) THEN
      STOP
    ELSE
      CALL PUSHREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL CHEM_DMS(imx, jmx, lmx, nmx, ndt1, tmp, airden, airmas, oh, &
&              xno3, tc, chldms_oh, chldms_no3, chldms_x, chpso2, chpmsa&
&              , cossza, pso2_dms, pmsa_dms)
      CALL PUSHREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL PUSHREAL8ARRAY(h2o2, imx*jmx*lmx)
      CALL CHEM_SO2(imx, jmx, lmx, nmx, ndt1, tmp, airden, airmas, cldf&
&              , oh, h2o2, tc, tdry, cossza, chpso4, chlso2_oh, chlso2_aq&
&              , pso2_dms, pso4_so2)
      CALL PUSHREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL CHEM_SO4(imx, jmx, lmx, nmx, ndt1, airmas, tc, tdry, cossza, &
&              pso4_so2)
      CALL A_CHEM_MSA(imx, jmx, lmx, nmx, ndt1, airmas, tc, a_tc, tdry, &
&                cossza, pmsa_dms, a_pmsa_dms)
      CALL POPREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL A_CHEM_SO4(imx, jmx, lmx, nmx, ndt1, airmas, tc, a_tc, tdry, &
&                cossza, pso4_so2, a_pso4_so2)
      CALL POPREAL8ARRAY(h2o2, imx*jmx*lmx)
      CALL POPREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL A_CHEM_SO2(imx, jmx, lmx, nmx, ndt1, tmp, a_tmp, airden, &
&                a_airden, airmas, cldf, oh, a_oh, h2o2, a_h2o2, tc, a_tc&
&                , tdry, cossza, chpso4, chlso2_oh, chlso2_aq, pso2_dms, &
&                a_pso2_dms, pso4_so2, a_pso4_so2)
      CALL POPREAL8ARRAY(tc, imx*jmx*lmx*nmx)
      CALL A_CHEM_DMS(imx, jmx, lmx, nmx, ndt1, tmp, a_tmp, airden, &
&                a_airden, airmas, oh, a_oh, xno3, a_xno3, tc, a_tc, &
&                chldms_oh, chldms_no3, chldms_x, chpso2, chpmsa, cossza&
&                , pso2_dms, a_pso2_dms, pmsa_dms, a_pmsa_dms)
    END IF
  END SUBROUTINE A_CHMDRV_SU

!  Differentiation of chem_dms in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: xno3 oh pso2_dms pmsa_dms tmp
!                airden tc
!   with respect to varying inputs: xno3 oh tmp airden tc
  SUBROUTINE A_CHEM_DMS(imx, jmx, lmx, nmx, ndt1, tmp, a_tmp, airden, &
&    a_airden, airmas, oh, a_oh, xno3, a_xno3, tc, a_tc, chldms_oh, &
&    chldms_no3, chldms_x, chpso2, chpmsa, cossza, pso2_dms, a_pso2_dms, &
&    pmsa_dms, a_pmsa_dms)
    USE module_data_gocartchem
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: nmx, ndt1, imx, jmx, lmx
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: tmp, airden, airmas
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_tmp, a_airden
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: oh, xno3
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_oh, a_xno3
    REAL*8, INTENT(INOUT) :: tc(imx, jmx, lmx, nmx)
    REAL*8 :: a_tc(imx, jmx, lmx, nmx)
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chldms_oh, &
&    chldms_no3
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chldms_x, chpso2&
&    , chpmsa
    REAL*8, DIMENSION(imx, jmx, lmx) :: pso2_dms, pmsa_dms
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_pso2_dms, a_pmsa_dms
    REAL*8, DIMENSION(imx, jmx), INTENT(IN) :: cossza
    REAL*8, PARAMETER :: fx=1.0
    REAL*8, PARAMETER :: a=0.75
    REAL*8, PARAMETER :: b=0.25
    REAL*8, PARAMETER :: eff=1.0
    REAL*8, PARAMETER :: f=1000.0/airmw*6.022d23*1.0d-6
    INTEGER :: i, j, l
    REAL(kind=8) :: tk, o2, dms0, rk1, rk2, rk3, dms_oh, dms, xoh, xn3, &
&    xx
    REAL(kind=8) :: a_tk, a_o2, a_dms0, a_rk1, a_rk2, a_rk3, a_dms_oh, &
&    a_dms
    INTEGER :: branch
    REAL(kind=8) :: temp3
    REAL*8 :: temp2
    REAL(kind=8) :: temp1
    REAL(kind=8) :: temp0
    REAL(kind=8) :: temp12b0
    REAL*8 :: temp6b0
    REAL :: temp11
    REAL*8 :: temp10
    REAL(kind=8) :: tempb1
    REAL(kind=8) :: tempb0
    REAL(kind=8) :: temp6b
    REAL(kind=8) :: temp7b
    REAL(kind=8) :: tempb
    REAL(kind=8) :: temp8b
    REAL*8 :: a_y1
    REAL(kind=8) :: temp
    REAL(kind=8) :: temp12b
    REAL :: temp9
    REAL*8 :: temp8
    REAL(kind=8) :: temp7
    REAL(kind=8) :: temp6
    REAL(kind=8) :: temp5
    REAL*8 :: y1
    REAL(kind=8) :: temp4
    REAL*8 :: temp7b0
    DO l=1,lmx
      DO j=1,jmx
        DO i=1,imx
          CALL PUSHREAL8(tk)
          tk = tmp(i, j, l)
          o2 = airden(i, j, l)*f*0.21
          CALL PUSHREAL8(dms0)
          dms0 = tc(i, j, l, ndms)
          CALL PUSHREAL8(rk1)
          rk1 = 0.0d0
          CALL PUSHREAL8(rk2)
          rk2 = 0.0d0
          CALL PUSHREAL8(rk3)
          rk3 = 0.0d0
          IF (oh(i, j, l) .GT. 0.0) THEN
            rk1 = 1.7d-42*EXP(7810.0/tk)*o2/(1.0+5.5d-31*EXP(7460.0/tk)*&
&              o2)*oh(i, j, l)*airden(i, j, l)*f
            rk2 = 1.2d-11*EXP(-(260.0/tk))*oh(i, j, l)*airden(i, j, l)*f
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (cossza(i, j) .LE. 0.0) THEN
            rk3 = 1.9d-13*EXP(500.0/tk)*xno3(i, j, l)*airden(i, j, l)*f
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
          CALL PUSHREAL8(dms_oh)
          dms_oh = dms0*EXP(-((rk1+rk2)*fx*REAL(ndt1)))
          dms = dms_oh*EXP(-(rk3*fx*REAL(ndt1)))
          IF (dms .LT. 1.0d-32) THEN
            dms = 1.0d-32
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
            dms = dms
          END IF
          IF (rk1 + rk2 .EQ. 0.0) THEN
            pmsa_dms(i, j, l) = 0.0d0
            CALL PUSHCONTROL2B(0)
          ELSE
            y1 = (dms0-dms_oh)*b*rk1/((rk1+rk2)*fx)*eff
            IF (0.0d0 .LT. y1) THEN
              pmsa_dms(i, j, l) = y1
              CALL PUSHCONTROL2B(2)
            ELSE
              pmsa_dms(i, j, l) = 0.0d0
              CALL PUSHCONTROL2B(1)
            END IF
          END IF
          IF (0.0d0 .LT. dms0 - dms - pmsa_dms(i, j, l)) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
    END DO
    DO l=lmx,1,-1
      DO j=jmx,1,-1
        DO i=imx,1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            a_dms0 = a_pso2_dms(i, j, l)
            a_dms = -a_pso2_dms(i, j, l)
            a_pmsa_dms(i, j, l) = a_pmsa_dms(i, j, l) - a_pso2_dms(i, j&
&              , l)
            a_pso2_dms(i, j, l) = 0.0_8
          ELSE
            a_pso2_dms(i, j, l) = 0.0_8
            a_dms0 = 0.0_8
            a_dms = 0.0_8
          END IF
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            a_pmsa_dms(i, j, l) = 0.0_8
            a_rk1 = 0.0_8
            a_rk2 = 0.0_8
            a_dms_oh = 0.0_8
          ELSE
            IF (branch .EQ. 1) THEN
              a_pmsa_dms(i, j, l) = 0.0_8
              a_y1 = 0.D0
            ELSE
              a_y1 = a_pmsa_dms(i, j, l)
              a_pmsa_dms(i, j, l) = 0.0_8
            END IF
            temp12b = b*eff*a_y1/(fx*(rk1+rk2))
            temp12b0 = -((dms0-dms_oh)*rk1*temp12b/(rk1+rk2))
            a_dms0 = a_dms0 + rk1*temp12b
            a_dms_oh = -(rk1*temp12b)
            a_rk1 = temp12b0 + (dms0-dms_oh)*temp12b
            a_rk2 = temp12b0
          END IF
          a_dms = a_dms + a_tc(i, j, l, ndms)
          a_tc(i, j, l, ndms) = 0.0_8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) a_dms = 0.0_8
          temp11 = REAL(ndt1)
          temp10 = -(temp11*fx*rk3)
          a_dms_oh = a_dms_oh + EXP(temp10)*a_dms
          a_rk3 = -(temp11*EXP(temp10)*dms_oh*fx*a_dms)
          CALL POPREAL8(dms_oh)
          temp9 = REAL(ndt1)
          temp8 = -(temp9*fx*(rk1+rk2))
          temp8b = -(temp9*EXP(temp8)*dms0*fx*a_dms_oh)
          a_dms0 = a_dms0 + EXP(temp8)*a_dms_oh
          a_rk1 = a_rk1 + temp8b
          a_rk2 = a_rk2 + temp8b
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            a_tk = 0.0_8
          ELSE
            tk = tmp(i, j, l)
            temp7 = 500.0/tk
            temp7b = f*1.9d-13*a_rk3
            temp7b0 = EXP(temp7)*temp7b
            a_tk = -(EXP(temp7)*xno3(i, j, l)*airden(i, j, l)*temp7*&
&              temp7b/tk)
            a_xno3(i, j, l) = a_xno3(i, j, l) + airden(i, j, l)*&
&              temp7b0
            a_airden(i, j, l) = a_airden(i, j, l) + xno3(i, j, l)*&
&              temp7b0
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            o2 = airden(i, j, l)*f*0.21
            temp5 = 7460.0/tk
            temp4 = EXP(temp5)
            temp3 = 5.5d-31*temp4*o2 + 1.0
            temp2 = oh(i, j, l)
            temp1 = o2*temp2*airden(i, j, l)
            temp0 = 7810.0/tk
            temp = EXP(temp0)
            tempb = f*1.7d-42*a_rk1/temp3
            tempb1 = temp*airden(i, j, l)*tempb
            tempb0 = -(temp*temp1*5.5d-31*tempb/temp3)
            temp6 = 260.0/tk
            temp6b = f*1.2d-11*a_rk2
            temp6b0 = EXP(-temp6)*temp6b
            a_tk = a_tk + EXP(-temp6)*oh(i, j, l)*airden(i, j, l)*temp6*&
&              temp6b/tk - EXP(temp5)*o2*temp5*tempb0/tk - EXP(temp0)&
&              *temp1*temp0*tempb/tk
            a_oh(i, j, l) = a_oh(i, j, l) + o2*tempb1 + airden(i, j, l&
&              )*temp6b0
            a_airden(i, j, l) = a_airden(i, j, l) + temp*o2*temp2*&
&              tempb + oh(i, j, l)*temp6b0
            a_o2 = temp4*tempb0 + temp2*tempb1
          ELSE
            a_o2 = 0.0_8
          END IF
          CALL POPREAL8(rk3)
          CALL POPREAL8(rk2)
          CALL POPREAL8(rk1)
          CALL POPREAL8(dms0)
          a_tc(i, j, l, ndms) = a_tc(i, j, l, ndms) + a_dms0
          a_airden(i, j, l) = a_airden(i, j, l) + f*0.21*a_o2
          CALL POPREAL8(tk)
          a_tmp(i, j, l) = a_tmp(i, j, l) + a_tk
        END DO
      END DO
    END DO
  END SUBROUTINE A_CHEM_DMS

!  Differentiation of chem_so2 in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: h2o2 pso4_so2 oh tmp airden
!                tc
!   with respect to varying inputs: h2o2 oh pso2_dms tmp airden
!                tc
  SUBROUTINE A_CHEM_SO2(imx, jmx, lmx, nmx, ndt1, tmp, a_tmp, airden, &
&    a_airden, airmas, cldf, oh, a_oh, h2o2, a_h2o2, tc, a_tc, tdry, &
&    cossza, chpso4, chlso2_oh, chlso2_aq, pso2_dms, a_pso2_dms, pso4_so2&
&    , a_pso4_so2)
    USE module_data_gocartchem
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: nmx, ndt1, imx, jmx, lmx
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: tmp, airden, airmas
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_tmp, a_airden
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: cldf, oh
    REAL*8, DIMENSION(imx, jmx, lmx) :: a_oh
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: h2o2
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: a_h2o2
    REAL*8, DIMENSION(imx, jmx), INTENT(IN) :: cossza
    REAL*8, INTENT(INOUT) :: tc(imx, jmx, lmx, nmx)
    REAL*8 :: a_tc(imx, jmx, lmx, nmx)
    REAL*8, INTENT(INOUT) :: tdry(imx, jmx, nmx)
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(INOUT) :: chpso4, chlso2_oh&
&    , chlso2_aq
    REAL*8, INTENT(IN) :: pso2_dms(imx, jmx, lmx)
    REAL*8 :: a_pso2_dms(imx, jmx, lmx)
    REAL*8 :: pso4_so2(imx, jmx, lmx)
    REAL*8 :: a_pso4_so2(imx, jmx, lmx)
    REAL*8 :: k0, kk, m, l1, l2, ld
    REAL*8 :: a_k0, a_kk, a_m, a_l1, a_l2
    REAL*8, PARAMETER :: f=1000./airmw*6.022d23*1.0d-6
    REAL*8, PARAMETER :: ki=1.5d-12
    INTEGER :: i, j, l
    REAL*8 :: so20, tk, f1, rk1, rk2, rk, rkt, so2_cd, fc, so2
    REAL*8 :: a_so20, a_tk, a_f1, a_rk1, a_rk, a_rkt, a_so2_cd, a_fc, &
&    a_so2
    INTEGER :: branch
    REAL*8 :: temp3
    REAL*8 :: temp2
    REAL*8 :: temp1
    REAL*8 :: temp0
    REAL*8 :: temp0b
    REAL*8 :: temp1b
    REAL*8 :: temp2b
    REAL*8 :: temp3b
    REAL*8 :: temp0b0
    REAL*8 :: temp3b2
    REAL*8 :: temp3b1
    REAL*8 :: temp3b0
    REAL*8 :: temp
    REAL*8 :: temp4
    DO l=1,lmx
      DO j=1,jmx
        DO i=1,imx
          so20 = tc(i, j, l, nso2)
          tk = tmp(i, j, l)
          k0 = 3.0d-31*(300.0/tk)**3.3
          m = airden(i, j, l)*f
          kk = k0*m/ki
          CALL PUSHREAL8(f1)
          f1 = (1.0+LOG10(kk)**2)**(-1)
          CALL PUSHREAL8(rk1)
          rk1 = k0*m/(1.0+kk)*0.6**f1*oh(i, j, l)*airden(i, j, l)*f
          rk2 = 0.0
          CALL PUSHREAL8(rk)
          rk = rk1 + rk2
          CALL PUSHREAL8(rkt)
          rkt = rk*REAL(ndt1)
          IF (rk .GT. 0.0) THEN
            CALL PUSHREAL8(so2_cd)
            so2_cd = so20*EXP(-rkt) + pso2_dms(i, j, l)*(1.0-EXP(-rkt))/&
&              rkt
            l1 = (so20-so2_cd+pso2_dms(i, j, l))*rk1/rk
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHREAL8(so2_cd)
            so2_cd = so20
            l1 = 0.0
            CALL PUSHCONTROL1B(1)
          END IF
          CALL PUSHREAL8(fc)
          fc = cldf(i, j, l)
          IF (fc .GT. 0.0 .AND. so2_cd .GT. 0.0 .AND. tk .GT. 258.0) &
&          THEN
            IF (so2_cd .GT. h2o2(i, j, l)) THEN
              CALL PUSHREAL8(fc)
              fc = fc*(h2o2(i, j, l)/so2_cd)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
            so2 = so2_cd*(1.0-fc)
            l2 = so2_cd*fc
            CALL PUSHCONTROL1B(1)
          ELSE
            so2 = so2_cd
            l2 = 0.0
            CALL PUSHCONTROL1B(0)
          END IF
          IF (so2 .LT. 1.0d-32) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (0.0d0 .LT. l1 + l2) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
    END DO
    a_pso2_dms = 0.0_8
    DO l=lmx,1,-1
      DO j=jmx,1,-1
        DO i=imx,1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            a_l1 = a_pso4_so2(i, j, l)
            a_l2 = a_pso4_so2(i, j, l)
            a_pso4_so2(i, j, l) = 0.0_8
          ELSE
            a_pso4_so2(i, j, l) = 0.0_8
            a_l1 = 0.0_8
            a_l2 = 0.0_8
          END IF
          a_so2 = a_tc(i, j, l, nso2)
          a_tc(i, j, l, nso2) = 0.0_8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) a_so2 = 0.0_8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            a_so2_cd = a_so2
          ELSE
            a_so2_cd = (1.0-fc)*a_so2 + fc*a_l2
            a_fc = so2_cd*a_l2 - so2_cd*a_so2
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(fc)
              temp3b1 = fc*a_fc/so2_cd
              a_h2o2(i, j, l) = temp3b1 + (1.0-cldf(i, j, l))*a_h2o2(i&
&                , j, l)
              a_so2_cd = a_so2_cd - h2o2(i, j, l)*temp3b1/so2_cd
            ELSE
              temp4 = h2o2(i, j, l)
              temp3 = so2_cd/temp4
              temp3b2 = -(cldf(i, j, l)*h2o2(i, j, l)*a_h2o2(i, j, l)/&
&                temp4)
              a_so2_cd = a_so2_cd + temp3b2
              a_h2o2(i, j, l) = (1.0-cldf(i, j, l)*temp3)*a_h2o2(i, j, l&
&                ) - temp3*temp3b2
            END IF
          END IF
          tk = tmp(i, j, l)
          CALL POPREAL8(fc)
          so20 = tc(i, j, l, nso2)
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            temp3b = rk1*a_l1/rk
            temp3b0 = (so20-so2_cd+pso2_dms(i, j, l))*a_l1/rk
            a_so2_cd = a_so2_cd - temp3b
            a_so20 = EXP(-rkt)*a_so2_cd + temp3b
            a_rk1 = temp3b0
            a_rk = -(rk1*temp3b0/rk)
            CALL POPREAL8(so2_cd)
            temp2b = (1.0-EXP(-rkt))*a_so2_cd/rkt
            a_pso2_dms(i, j, l) = a_pso2_dms(i, j, l) + temp2b + &
&              temp3b
            temp2 = pso2_dms(i, j, l)/rkt
            a_rkt = (EXP(-rkt)*temp2-EXP(-rkt)*so20)*a_so2_cd - temp2*&
&              temp2b
          ELSE
            CALL POPREAL8(so2_cd)
            a_so20 = a_so2_cd
            a_rk1 = 0.0_8
            a_rk = 0.0_8
            a_rkt = 0.0_8
          END IF
          CALL POPREAL8(rkt)
          a_rk = a_rk + REAL(ndt1)*a_rkt
          CALL POPREAL8(rk)
          a_rk1 = a_rk1 + a_rk
          m = airden(i, j, l)*f
          k0 = 3.0d-31*(300.0/tk)**3.3
          kk = k0*m/ki
          CALL POPREAL8(rk1)
          temp1 = 0.6**f1
          temp0 = k0*m/(kk+1.0)
          temp0b = f*oh(i, j, l)*airden(i, j, l)*a_rk1
          temp0b0 = temp1*temp0b/(kk+1.0)
          temp1b = f*temp0*temp1*a_rk1
          a_f1 = temp0*temp1*LOG(0.6)*temp0b
          a_oh(i, j, l) = a_oh(i, j, l) + airden(i, j, l)*temp1b
          CALL POPREAL8(f1)
          temp = LOG10(kk)
          a_kk = -(2*temp*a_f1/((temp**2+1.0)**2*kk*LOG(10.0))) - temp0*&
&            temp0b0
          a_k0 = m*a_kk/ki + m*temp0b0
          a_m = k0*a_kk/ki + k0*temp0b0
          a_airden(i, j, l) = a_airden(i, j, l) + f*a_m + oh(i, j, l)*&
&            temp1b
          a_tk = -(3.3*(300.0/tk)**2.3*3.0d-31*300.0*a_k0/tk**2)
          a_tmp(i, j, l) = a_tmp(i, j, l) + a_tk
          a_tc(i, j, l, nso2) = a_tc(i, j, l, nso2) + a_so20
        END DO
      END DO
    END DO
  END SUBROUTINE A_CHEM_SO2

!  Differentiation of chem_so4 in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: tc
!   with respect to varying inputs: pso4_so2 tc
  SUBROUTINE A_CHEM_SO4(imx, jmx, lmx, nmx, ndt1, airmas, tc, a_tc, tdry&
&    , cossza, pso4_so2, a_pso4_so2)
    USE module_data_gocartchem
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: nmx, ndt1, imx, jmx, lmx
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: airmas
    REAL*8, INTENT(INOUT) :: tc(imx, jmx, lmx, nmx)
    REAL*8 :: a_tc(imx, jmx, lmx, nmx)
    REAL*8, INTENT(INOUT) :: tdry(imx, jmx, nmx)
    REAL*8, INTENT(IN) :: pso4_so2(imx, jmx, lmx)
    REAL*8 :: a_pso4_so2(imx, jmx, lmx)
    REAL*8, DIMENSION(imx, jmx), INTENT(IN) :: cossza
    INTEGER :: i, j, l
    REAL*8 :: so40, rk, rkt, so4
    REAL*8 :: a_so40, a_so4
    INTEGER :: branch
    DO l=1,lmx
      DO j=1,jmx
        DO i=1,imx
          so40 = tc(i, j, l, nso4)
          so4 = so40 + pso4_so2(i, j, l)
          IF (so4 .LT. 1.0d-32) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
    END DO
    a_pso4_so2 = 0.0_8
    DO l=lmx,1,-1
      DO j=jmx,1,-1
        DO i=imx,1,-1
          a_so4 = a_tc(i, j, l, nso4)
          a_tc(i, j, l, nso4) = 0.0_8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) a_so4 = 0.0_8
          a_so40 = a_so4
          a_pso4_so2(i, j, l) = a_pso4_so2(i, j, l) + a_so4
          a_tc(i, j, l, nso4) = a_tc(i, j, l, nso4) + a_so40
        END DO
      END DO
    END DO
  END SUBROUTINE A_CHEM_SO4

!  Differentiation of chem_msa in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: tc
!   with respect to varying inputs: pmsa_dms tc
  SUBROUTINE A_CHEM_MSA(imx, jmx, lmx, nmx, ndt1, airmas, tc, a_tc, tdry&
&    , cossza, pmsa_dms, a_pmsa_dms)
    USE module_data_gocartchem
    IMPLICIT NONE
    INTEGER, INTENT(IN) :: nmx, ndt1, imx, jmx, lmx
    REAL*8, DIMENSION(imx, jmx, lmx), INTENT(IN) :: airmas
    REAL*8, DIMENSION(imx, jmx), INTENT(IN) :: cossza
    REAL*8, INTENT(INOUT) :: tc(imx, jmx, lmx, nmx)
    REAL*8 :: a_tc(imx, jmx, lmx, nmx)
    REAL*8, INTENT(INOUT) :: tdry(imx, jmx, nmx)
    REAL*8, INTENT(IN) :: pmsa_dms(imx, jmx, lmx)
    REAL*8 :: a_pmsa_dms(imx, jmx, lmx)
    REAL*8 :: msa0, msa, rk, rkt
    REAL*8 :: a_msa0, a_msa
    INTEGER :: i, j, l
    INTEGER :: branch
    DO l=1,lmx
      DO j=1,jmx
        DO i=1,imx
          msa0 = tc(i, j, l, nmsa)
          msa = msa0 + pmsa_dms(i, j, l)
          IF (msa .LT. 1.0d-32) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
    END DO
    a_pmsa_dms = 0.0_8
    DO l=lmx,1,-1
      DO j=jmx,1,-1
        DO i=imx,1,-1
          a_msa = a_tc(i, j, l, nmsa)
          a_tc(i, j, l, nmsa) = 0.0_8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) a_msa = 0.0_8
          a_msa0 = a_msa
          a_pmsa_dms(i, j, l) = a_pmsa_dms(i, j, l) + a_msa
          a_tc(i, j, l, nmsa) = a_tc(i, j, l, nmsa) + a_msa0
        END DO
      END DO
    END DO
  END SUBROUTINE A_CHEM_MSA
END MODULE a_module_gocart_chem
