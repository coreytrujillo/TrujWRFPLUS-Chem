!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
MODULE a_module_emissions_anthropogenics
  IMPLICIT NONE

CONTAINS
!  Differentiation of add_anthropogenics in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: scaleant alt chem dz8w
!   with respect to varying inputs: scaleant alt rho_phy chem dz8w
  SUBROUTINE a_add_anthropogenics(id, dtstep, dz8w, a_dz8w, config_flags&
&    , rho_phy, a_rho_phy, alt, a_alt, chem, a_chem, emis_ant, &
&    emis_aircraft, scaleant, a_scaleant, ids, ide, jds, jde, kds, kde, &
&    ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte)
    USE module_configure
    USE module_state_description
    USE module_data_radm2
    USE module_data_sorgam, only : mw_so4_aer
    USE module_model_constants, only : mwdry
    IMPLICIT NONE
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER, INTENT(IN) :: id, ids, ide, jds, jde, kds, kde, ims, ime, &
&    jms, jme, kms, kme, its, ite, jts, jte, kts, kte
    REAL, INTENT(IN) :: dtstep
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: a_chem
    REAL, DIMENSION(ims:ime, kms:config_flags%kemit, jms:jme, &
&    num_emis_ant), INTENT(IN) :: emis_ant
    REAL, DIMENSION(ims:ime, jms:jme, num_scaleant), INTENT(IN) :: &
&    scaleant
    REAL, DIMENSION(ims:ime, jms:jme, num_scaleant) :: a_scaleant
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: rho_phy, &
&    alt
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_rho_phy, a_alt
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: dz8w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_dz8w
    REAL, DIMENSION(ims:ime, kms:config_flags%kemit_aircraft, jms:jme, &
&    num_emis_aircraft), OPTIONAL, INTENT(IN) :: emis_aircraft
    INTEGER :: i, j, k
    REAL :: conv_rho, conv_rho_aer
    REAL :: a_conv_rho, a_conv_rho_aer
    INTEGER :: branch
    INTEGER :: ad_to
    REAL :: temp1b38
    REAL :: temp1b37
    REAL :: temp1b36
    REAL :: temp0
    REAL :: temp1b35
    REAL :: temp1b34
    REAL :: temp1b33
    REAL :: temp1b32
    REAL :: temp1b31
    REAL :: temp1b30
    REAL :: temp1b
    INTEGER :: min2
    REAL :: temp1b9
    REAL :: temp1b8
    REAL :: temp1b7
    REAL :: temp1b6
    REAL :: temp1b5
    REAL :: temp1b4
    REAL :: temp1b3
    REAL :: temp1b2
    REAL :: temp1b1
    REAL :: temp1b0
    REAL :: temp1b29
    REAL :: temp1b28
    REAL :: temp1b27
    REAL :: temp1b26
    REAL :: temp1b25
    REAL :: temp1b24
    REAL :: temp1b23
    REAL :: temp1b22
    REAL :: temp1b21
    REAL :: temp1b20
    REAL :: temp1b19
    REAL :: temp1b18
    REAL :: temp1b17
    REAL :: temp1b16
    REAL :: temp1b15
    REAL :: temp1b14
    REAL :: temp1b13
    REAL :: temp1b12
    REAL :: temp1b11
    REAL :: temp1b10
    REAL :: tempb
    REAL :: temp1b41
    REAL :: temp1b40
    REAL :: temp
    REAL :: temp1b39
    DO j=jts,jte
      DO i=its,ite
        IF (config_flags%kemit .GT. kte) THEN
          min2 = kte
        ELSE
          min2 = config_flags%kemit
        END IF
        DO k=kts,min2
          CALL PUSHREAL8(conv_rho)
          conv_rho = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&            )
          if( config_flags%chem_opt == MOZART_KPP .or. &
              config_flags%chem_opt == MOZCART_KPP .or. &
              config_flags%chem_opt == MOZART_MOSAIC_4BIN_KPP .or. &
              config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP ) then
            conv_rho_aer = alt(i, k, j)*dtstep/dz8w(i, k, j)
            IF (config_flags%chem_opt .EQ. mozcart_kpp) THEN
              CALL PUSHCONTROL2B(0)
            ELSE IF (config_flags%chem_opt .EQ. &
&                mozart_mosaic_4bin_kpp) THEN
              CALL PUSHCONTROL2B(1)
            ELSE
              CALL PUSHCONTROL2B(2)
            END IF
          ELSE
            IF (p_ol2 .GT. 1) THEN
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
            IF (p_ete .GT. 1) THEN
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
            CALL PUSHCONTROL2B(3)
          END IF
        END DO
        CALL PUSHINTEGER4(k - 1)
      END DO
    END DO
    DO j=jte,jts,-1
      DO i=ite,its,-1
        CALL POPINTEGER4(ad_to)
        DO k=ad_to,kts,-1
          CALL POPCONTROL2B(branch)
          IF (branch .LT. 2) THEN
            IF (branch .EQ. 0) THEN
              temp1b22 = emis_ant(i, k, j, p_e_pm_10)*a_chem(i, k, j, &
&                p_p10)
              temp1b23 = emis_ant(i, k, j, p_e_pm_25)*a_chem(i, k, j, &
&                p_p25)
              temp1b21 = emis_ant(i, k, j, p_e_oc)*a_chem(i, k, j, &
&                p_oc1)
              conv_rho_aer = alt(i, k, j)*dtstep/dz8w(i, k, j)
              temp1b20 = emis_ant(i, k, j, p_e_bc)*a_chem(i, k, j, &
&                p_bc1)
              a_scaleant(i, j, p_scant_bc) = a_scaleant(i, j, p_scant_bc&
&                ) + conv_rho_aer*temp1b20
              a_conv_rho_aer = scaleant(i, j, p_scant_oc)*temp1b21 + &
&                scaleant(i, j, p_scant_pm_10)*temp1b22 + scaleant(i, j&
&                , p_scant_pm_25)*temp1b23 + scaleant(i, j, p_scant_bc)&
&                *temp1b20
              a_scaleant(i, j, p_scant_oc) = a_scaleant(i, j, p_scant_oc&
&                ) + conv_rho_aer*temp1b21
              a_scaleant(i, j, p_scant_pm_25) = a_scaleant(i, j, &
&                p_scant_pm_25) + conv_rho_aer*temp1b23
              a_scaleant(i, j, p_scant_pm_10) = a_scaleant(i, j, &
&                p_scant_pm_10) + conv_rho_aer*temp1b22
              conv_rho = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)&
&                *60.)
              a_conv_rho = 0.0_8
              GOTO 100
            ELSE
              conv_rho_aer = alt(i, k, j)*dtstep/dz8w(i, k, j)
              temp1b25 = emis_ant(i, k, j, p_e_co_a)*0.04*28./250.*a_chem(i, k, j, p_voca)
              temp1b24 = emis_ant(i, k, j, p_e_co_bb)*0.04*28./250.*a_chem(i, k, j, p_vocbb)
              a_scaleant(i, j, p_scant_co_bb) = a_scaleant(i, j, &
&                p_scant_co_bb) + conv_rho_aer*temp1b24
              a_conv_rho_aer = scaleant(i, j, p_scant_co_a)*temp1b25 + &
&                scaleant(i, j, p_scant_co_bb)*temp1b24
              a_scaleant(i, j, p_scant_co_a) = a_scaleant(i, j, &
&                p_scant_co_a) + conv_rho_aer*temp1b25
            END IF
          ELSE IF (branch .EQ. 2) THEN
            a_conv_rho = 0.0_8
          ELSE
            temp1b40 = emis_ant(i, k, j, p_e_olt)*a_chem(i, k, j, &
&              p_olt)
            temp1b39 = emis_ant(i, k, j, p_e_oli)*a_chem(i, k, j, &
&              p_oli)
            temp1b41 = emis_ant(i, k, j, p_e_tol)*a_chem(i, k, j, &
&              p_tol)
            temp1b38 = emis_ant(i, k, j, p_e_xyl)*a_chem(i, k, j, &
&              p_xyl)
            conv_rho = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*&
&              60.)
            temp1b37 = emis_ant(i, k, j, p_e_ket)*a_chem(i, k, j, &
&              p_ket)
            a_scaleant(i, j, p_scant_ket) = a_scaleant(i, j, p_scant_ket&
&              ) + conv_rho*temp1b37
            a_conv_rho = scaleant(i, j, p_scant_xyl)*temp1b38 + &
&              scaleant(i, j, p_scant_oli)*temp1b39 + scaleant(i, j, &
&              p_scant_olt)*temp1b40 + scaleant(i, j, p_scant_tol)*&
&              temp1b41 + scaleant(i, j, p_scant_ket)*temp1b37
            a_scaleant(i, j, p_scant_xyl) = a_scaleant(i, j, p_scant_xyl&
&              ) + conv_rho*temp1b38
            a_scaleant(i, j, p_scant_tol) = a_scaleant(i, j, p_scant_tol&
&              ) + conv_rho*temp1b41
            a_scaleant(i, j, p_scant_oli) = a_scaleant(i, j, p_scant_oli&
&              ) + conv_rho*temp1b39
            a_scaleant(i, j, p_scant_olt) = a_scaleant(i, j, p_scant_olt&
&              ) + conv_rho*temp1b40
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              temp1b36 = emis_ant(i, k, j, p_e_ol2)*a_chem(i, k, j, &
&                p_ete)
              a_scaleant(i, j, p_scant_ol2) = a_scaleant(i, j, &
&                p_scant_ol2) + conv_rho*temp1b36
              a_conv_rho = a_conv_rho + scaleant(i, j, p_scant_ol2)*&
&                temp1b36
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              temp1b35 = emis_ant(i, k, j, p_e_ol2)*a_chem(i, k, j, &
&                p_ol2)
              a_scaleant(i, j, p_scant_ol2) = a_scaleant(i, j, &
&                p_scant_ol2) + conv_rho*temp1b35
              a_conv_rho = a_conv_rho + scaleant(i, j, p_scant_ol2)*&
&                temp1b35
            END IF
            temp1b31 = emis_ant(i, k, j, p_e_csl)*a_chem(i, k, j, &
&              p_csl)
            temp1b30 = emis_ant(i, k, j, p_e_iso)*a_chem(i, k, j, &
&              p_iso)
            temp1b32 = emis_ant(i, k, j, p_e_ald)*a_chem(i, k, j, &
&              p_ald)
            temp1b29 = emis_ant(i, k, j, p_e_hcho)*a_chem(i, k, j, &
&              p_hcho)
            temp1b33 = emis_ant(i, k, j, p_e_ora2)*a_chem(i, k, j, &
&              p_ora2)
            temp1b28 = emis_ant(i, k, j, p_e_hc3)*a_chem(i, k, j, &
&              p_hc3)
            temp1b34 = emis_ant(i, k, j, p_e_hc5)*a_chem(i, k, j, &
&              p_hc5)
            temp1b27 = emis_ant(i, k, j, p_e_hc8)*a_chem(i, k, j, &
&              p_hc8)
            temp1b26 = emis_ant(i, k, j, p_e_eth)*a_chem(i, k, j, &
&              p_eth)
            a_scaleant(i, j, p_scant_eth) = a_scaleant(i, j, p_scant_eth&
&              ) + conv_rho*temp1b26
            a_conv_rho = a_conv_rho + scaleant(i, j, p_scant_hc8)*&
&              temp1b27 + scaleant(i, j, p_scant_hc3)*temp1b28 + &
&              scaleant(i, j, p_scant_hcho)*temp1b29 + scaleant(i, j, &
&              p_scant_iso)*temp1b30 + scaleant(i, j, p_scant_csl)*&
&              temp1b31 + scaleant(i, j, p_scant_ald)*temp1b32 + &
&              scaleant(i, j, p_scant_ora2)*temp1b33 + scaleant(i, j, &
&              p_scant_hc5)*temp1b34 + scaleant(i, j, p_scant_eth)*&
&              temp1b26
            a_scaleant(i, j, p_scant_hc8) = a_scaleant(i, j, p_scant_hc8&
&              ) + conv_rho*temp1b27
            a_scaleant(i, j, p_scant_hc5) = a_scaleant(i, j, p_scant_hc5&
&              ) + conv_rho*temp1b34
            a_scaleant(i, j, p_scant_hc3) = a_scaleant(i, j, p_scant_hc3&
&              ) + conv_rho*temp1b28
            a_scaleant(i, j, p_scant_ora2) = a_scaleant(i, j, &
&              p_scant_ora2) + conv_rho*temp1b33
            a_scaleant(i, j, p_scant_hcho) = a_scaleant(i, j, &
&              p_scant_hcho) + conv_rho*temp1b29
            a_scaleant(i, j, p_scant_ald) = a_scaleant(i, j, p_scant_ald&
&              ) + conv_rho*temp1b32
            a_scaleant(i, j, p_scant_iso) = a_scaleant(i, j, p_scant_iso&
&              ) + conv_rho*temp1b30
            a_scaleant(i, j, p_scant_csl) = a_scaleant(i, j, p_scant_csl&
&              ) + conv_rho*temp1b31
            GOTO 110
          END IF
          a_conv_rho_aer = 0.0_8
 100      temp1b12 = emis_ant(i, k, j, p_e_bigalk)*a_chem(i, k, j, &
&            p_bigalk)
          temp1b11 = emis_ant(i, k, j, p_e_bigene)*a_chem(i, k, j, &
&            p_bigene)
          temp1b13 = emis_ant(i, k, j, p_e_c2h4)*a_chem(i, k, j, &
&            p_c2h4)
          temp1b10 = emis_ant(i, k, j, p_e_c2h5oh)*a_chem(i, k, j, &
&            p_c2h5oh)
          temp1b14 = emis_ant(i, k, j, p_e_c2h6)*a_chem(i, k, j, &
&            p_c2h6)
          temp1b9 = emis_ant(i, k, j, p_e_c3h6)*a_chem(i, k, j, p_c3h6&
&            )
          temp1b15 = emis_ant(i, k, j, p_e_c3h8)*a_chem(i, k, j, &
&            p_c3h8)
          temp1b8 = emis_ant(i, k, j, p_e_ch2o)*a_chem(i, k, j, p_hcho&
&            )
          temp1b16 = emis_ant(i, k, j, p_e_ch3cho)*a_chem(i, k, j, &
&            p_ald)
          temp1b7 = emis_ant(i, k, j, p_e_ch3coch3)*a_chem(i, k, j, &
&            p_acet)
          temp1b17 = emis_ant(i, k, j, p_e_ch3oh)*a_chem(i, k, j, &
&            p_ch3oh)
          temp1b6 = emis_ant(i, k, j, p_e_mek)*a_chem(i, k, j, p_mek)
          temp1b18 = emis_ant(i, k, j, p_e_toluene)*a_chem(i, k, j, &
&            p_tol)
          temp1b5 = emis_ant(i, k, j, p_e_isop)*a_chem(i, k, j, &
&            p_isopr)
          a_conv_rho_aer = a_conv_rho_aer + mwdry*1.e-3*emis_ant(i, k, j&
&            , p_e_sulf)*a_chem(i, k, j, p_sulf)/mw_so4_aer
          temp1b4 = emis_ant(i, k, j, p_e_c10h16)*a_chem(i, k, j, &
&            p_c10h16)
          a_scaleant(i, j, p_scant_c10h16) = a_scaleant(i, j, &
&            p_scant_c10h16) + conv_rho*temp1b4
          a_conv_rho = a_conv_rho + scaleant(i, j, p_scant_isop)*&
&            temp1b5 + scaleant(i, j, p_scant_mek)*temp1b6 + scaleant&
&            (i, j, p_scant_ch3coch3)*temp1b7 + scaleant(i, j, &
&            p_scant_ch2o)*temp1b8 + scaleant(i, j, p_scant_c3h6)*&
&            temp1b9 + scaleant(i, j, p_scant_c2h5oh)*temp1b10 + &
&            scaleant(i, j, p_scant_bigene)*temp1b11 + scaleant(i, j, &
&            p_scant_bigalk)*temp1b12 + scaleant(i, j, p_scant_c2h4)*&
&            temp1b13 + scaleant(i, j, p_scant_c2h6)*temp1b14 + &
&            scaleant(i, j, p_scant_c3h8)*temp1b15 + scaleant(i, j, &
&            p_scant_ch3cho)*temp1b16 + scaleant(i, j, p_scant_ch3oh)*&
&            temp1b17 + scaleant(i, j, p_scant_toluene)*temp1b18 + &
&            scaleant(i, j, p_scant_c10h16)*temp1b4
          a_scaleant(i, j, p_scant_isop) = a_scaleant(i, j, p_scant_isop&
&            ) + conv_rho*temp1b5
          a_scaleant(i, j, p_scant_toluene) = a_scaleant(i, j, &
&            p_scant_toluene) + conv_rho*temp1b18
          a_scaleant(i, j, p_scant_mek) = a_scaleant(i, j, p_scant_mek) &
&            + conv_rho*temp1b6
          a_scaleant(i, j, p_scant_ch3oh) = a_scaleant(i, j, &
&            p_scant_ch3oh) + conv_rho*temp1b17
          a_scaleant(i, j, p_scant_ch3coch3) = a_scaleant(i, j, &
&            p_scant_ch3coch3) + conv_rho*temp1b7
          a_scaleant(i, j, p_scant_ch3cho) = a_scaleant(i, j, &
&            p_scant_ch3cho) + conv_rho*temp1b16
          a_scaleant(i, j, p_scant_ch2o) = a_scaleant(i, j, p_scant_ch2o&
&            ) + conv_rho*temp1b8
          a_scaleant(i, j, p_scant_c3h8) = a_scaleant(i, j, p_scant_c3h8&
&            ) + conv_rho*temp1b15
          a_scaleant(i, j, p_scant_c3h6) = a_scaleant(i, j, p_scant_c3h6&
&            ) + conv_rho*temp1b9
          a_scaleant(i, j, p_scant_c2h6) = a_scaleant(i, j, p_scant_c2h6&
&            ) + conv_rho*temp1b14
          a_scaleant(i, j, p_scant_c2h5oh) = a_scaleant(i, j, &
&            p_scant_c2h5oh) + conv_rho*temp1b10
          a_scaleant(i, j, p_scant_c2h4) = a_scaleant(i, j, p_scant_c2h4&
&            ) + conv_rho*temp1b13
          a_scaleant(i, j, p_scant_bigene) = a_scaleant(i, j, &
&            p_scant_bigene) + conv_rho*temp1b11
          a_scaleant(i, j, p_scant_bigalk) = a_scaleant(i, j, &
&            p_scant_bigalk) + conv_rho*temp1b12
          temp1b19 = dtstep*a_conv_rho_aer/dz8w(i, k, j)
          a_alt(i, k, j) = a_alt(i, k, j) + temp1b19
          a_dz8w(i, k, j) = a_dz8w(i, k, j) - alt(i, k, j)*temp1b19/&
&            dz8w(i, k, j)
 110      temp1b2 = emis_ant(i, k, j, p_e_so2)*a_chem(i, k, j, p_so2)
          temp1b1 = emis_ant(i, k, j, p_e_co)*a_chem(i, k, j, p_co)
          temp1b3 = emis_ant(i, k, j, p_e_no)*a_chem(i, k, j, p_no)
          temp1b0 = emis_ant(i, k, j, p_e_no2)*a_chem(i, k, j, p_no2)
          temp1b = emis_ant(i, k, j, p_e_nh3)*a_chem(i, k, j, p_nh3)
          a_scaleant(i, j, p_scant_nh3) = a_scaleant(i, j, p_scant_nh3) &
&            + conv_rho*temp1b
          a_conv_rho = a_conv_rho + scaleant(i, j, p_scant_no2)*&
&            temp1b0 + scaleant(i, j, p_scant_co)*temp1b1 + scaleant(&
&            i, j, p_scant_so2)*temp1b2 + scaleant(i, j, p_scant_no)*&
&            temp1b3 + scaleant(i, j, p_scant_nh3)*temp1b
          a_scaleant(i, j, p_scant_no2) = a_scaleant(i, j, p_scant_no2) &
&            + conv_rho*temp1b0
          a_scaleant(i, j, p_scant_no) = a_scaleant(i, j, p_scant_no) + &
&            conv_rho*temp1b3
          a_scaleant(i, j, p_scant_co) = a_scaleant(i, j, p_scant_co) + &
&            conv_rho*temp1b1
          a_scaleant(i, j, p_scant_so2) = a_scaleant(i, j, p_scant_so2) &
&            + conv_rho*temp1b2
          CALL POPREAL8(conv_rho)
          temp0 = 60.*rho_phy(i, k, j)
          temp = temp0*dz8w(i, k, j)
          tempb = -(dtstep*4.828e-4*a_conv_rho/temp**2)
          a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + dz8w(i, k, j)*60.*&
&            tempb
          a_dz8w(i, k, j) = a_dz8w(i, k, j) + temp0*tempb
        END DO
      END DO
    END DO
  END SUBROUTINE a_add_anthropogenics

END MODULE a_module_emissions_anthropogenics
