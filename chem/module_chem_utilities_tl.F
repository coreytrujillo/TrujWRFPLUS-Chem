!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
MODULE g_module_chem_utilities
  USE module_domain
  USE module_model_constants
  USE module_state_description
  USE module_configure
  IMPLICIT NONE

CONTAINS
!  Differentiation of chem_prep in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: v_phy z t8w rh t_phy p_phy
!                u_phy p8w z_at_w rho dz8w
!   with respect to varying inputs: p t u v moist ph alt
!   RW status of diff variables: v_phy:out p:in t:in u:in v:in
!                z:out t8w:out rh:out t_phy:out p_phy:out moist:in
!                ph:in u_phy:out alt:in p8w:out z_at_w:out rho:out
!                dz8w:out
  SUBROUTINE g_chem_prep(config_flags, u, g_u, v, g_v, p, g_p, pb, alt, &
&    g_alt, ph, g_ph, phb, t, g_t, moist, g_moist, n_moist, rho, g_rho, &
&    p_phy, g_p_phy, u_phy, g_u_phy, v_phy, g_v_phy, p8w, g_p8w, t_phy, &
&    g_t_phy, t8w, g_t8w, z, g_z, z_at_w, g_z_at_w, dz8w, g_dz8w, rh, &
&    g_rh, fzm, fzp, ids, ide, jds, jde, kds, kde, ims, ime, jms, jme, &
&    kms, kme, its, ite, jts, jte, kts, kte)
    IMPLICIT NONE
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&    jme, kms, kme, its, ite, jts, jte, kts, kte
    INTEGER, INTENT(IN) :: n_moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, n_moist), INTENT(IN) :: &
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, n_moist), INTENT(IN) :: &
&    g_moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(OUT) :: u_phy, &
&    v_phy, p_phy, p8w, t_phy, t8w, rho, z, dz8w, rh, z_at_w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(OUT) :: g_u_phy, &
&    g_v_phy, g_p_phy, g_p8w, g_t_phy, g_t8w, g_rho, g_z, g_dz8w, g_rh, &
&    g_z_at_w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: pb, p, u, &
&    v, alt, ph, phb, t
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_p, g_u, &
&    g_v, g_alt, g_ph, g_t
    REAL, DIMENSION(kms:kme), INTENT(IN) :: fzm, fzp
    INTEGER :: i_start, i_end, j_start, j_end, k_start, k_end
    INTEGER :: i, j, k
    REAL :: w1, w2, z0, z1, z2
    REAL :: g_w1, g_w2, g_z0, g_z1, g_z2
    REAL :: pwx1
    REAL :: g_pwx1
    REAL :: pwr1
    REAL :: g_pwr1
    REAL :: arg1
    REAL :: g_arg1
    REAL :: arg10
    REAL :: g_arg10
    REAL :: g_y2
    REAL :: g_y1
    REAL :: y2
    REAL :: y1
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    k_start = kts
    IF (kte .GT. kde - 1) THEN
      k_end = kde - 1
    ELSE
      k_end = kte
    END IF
    g_v_phy = 0.0_8
    g_t_phy = 0.0_8
    g_p_phy = 0.0_8
    g_u_phy = 0.0_8
    g_rho = 0.0_8
    DO j=j_start,j_end
      DO k=k_start,k_end
        DO i=i_start,i_end
          g_p_phy(i, k, j) = g_p(i, k, j)
          p_phy(i, k, j) = p(i, k, j) + pb(i, k, j)
          g_pwx1 = g_p_phy(i, k, j)/p1000mb
          pwx1 = p_phy(i, k, j)/p1000mb
          IF (pwx1 .GT. 0.0_8 .OR. (pwx1 .LT. 0.0_8 .AND. rcp .EQ. INT(&
&              rcp))) THEN
            g_pwr1 = rcp*pwx1**(rcp-1)*g_pwx1
          ELSE IF (pwx1 .EQ. 0.0_8 .AND. rcp .EQ. 1.0) THEN
            g_pwr1 = g_pwx1
          ELSE
            g_pwr1 = 0.0_8
          END IF
          pwr1 = pwx1**rcp
          g_t_phy(i, k, j) = g_t(i, k, j)*pwr1 + (t(i, k, j)+t0)*g_pwr1
          t_phy(i, k, j) = (t(i, k, j)+t0)*pwr1
          g_rho(i, k, j) = g_moist(i, k, j, p_qv)/alt(i, k, j) - g_alt(i&
&            , k, j)*(1.+moist(i, k, j, p_qv))/alt(i, k, j)**2
          rho(i, k, j) = 1./alt(i, k, j)*(1.+moist(i, k, j, p_qv))
          g_u_phy(i, k, j) = 0.5*(g_u(i, k, j)+g_u(i+1, k, j))
          u_phy(i, k, j) = 0.5*(u(i, k, j)+u(i+1, k, j))
          g_v_phy(i, k, j) = 0.5*(g_v(i, k, j)+g_v(i, k, j+1))
          v_phy(i, k, j) = 0.5*(v(i, k, j)+v(i, k, j+1))
        END DO
      END DO
    END DO
    DO j=j_start,j_end
      DO i=i_start,i_end
        g_p_phy(i, kte, j) = g_p_phy(i, k_end, j)
        p_phy(i, kte, j) = p_phy(i, k_end, j)
        g_t_phy(i, kte, j) = g_t_phy(i, k_end, j)
        t_phy(i, kte, j) = t_phy(i, k_end, j)
        g_rho(i, kte, j) = g_rho(i, k_end, j)
        rho(i, kte, j) = rho(i, k_end, j)
        g_u_phy(i, kte, j) = g_u_phy(i, k_end, j)
        u_phy(i, kte, j) = u_phy(i, k_end, j)
        g_v_phy(i, kte, j) = g_v_phy(i, k_end, j)
        v_phy(i, kte, j) = v_phy(i, k_end, j)
      END DO
    END DO
    g_z_at_w = 0.0_8
    DO j=j_start,j_end
      DO k=k_start,kte
        DO i=i_start,i_end
          g_z_at_w(i, k, j) = g_ph(i, k, j)/g
          z_at_w(i, k, j) = (phb(i, k, j)+ph(i, k, j))/g
        END DO
      END DO
    END DO
    g_dz8w = 0.0_8
    DO j=j_start,j_end
      DO k=k_start,kte-1
        DO i=i_start,i_end
          g_dz8w(i, k, j) = g_z_at_w(i, k+1, j) - g_z_at_w(i, k, j)
          dz8w(i, k, j) = z_at_w(i, k+1, j) - z_at_w(i, k, j)
        END DO
      END DO
    END DO
    DO j=j_start,j_end
      DO i=i_start,i_end
        g_dz8w(i, kte, j) = 0.0_8
        dz8w(i, kte, j) = 0.
      END DO
    END DO
    g_z = 0.0_8
    g_rh = 0.0_8
    DO j=j_start,j_end
      DO k=k_start,k_end
        DO i=i_start,i_end
          g_z(i, k, j) = 0.5*(g_z_at_w(i, k, j)+g_z_at_w(i, k+1, j))
          z(i, k, j) = 0.5*(z_at_w(i, k, j)+z_at_w(i, k+1, j))
          g_arg1 = (17.27*g_t_phy(i, k, j)*(t_phy(i, k, j)-36.)-17.27*(&
&            t_phy(i, k, j)-273.)*g_t_phy(i, k, j))/(t_phy(i, k, j)-36.)&
&            **2
          arg1 = 17.27*(t_phy(i, k, j)-273.)/(t_phy(i, k, j)-36.)
          g_y2 = (g_moist(i, k, j, p_qv)*3.80*EXP(arg1)/(.01*p_phy(i, k&
&            , j))-moist(i, k, j, p_qv)*(3.80*g_arg1*EXP(arg1)*.01*p_phy(&
&            i, k, j)-3.80*EXP(arg1)*.01*g_p_phy(i, k, j))/(.01**2*p_phy(&
&            i, k, j)**2))/(3.80*EXP(arg1)/(.01*p_phy(i, k, j)))**2
          y2 = moist(i, k, j, p_qv)/(3.80*EXP(arg1)/(.01*p_phy(i, k, j))&
&            )
          IF (.95 .GT. y2) THEN
            g_y1 = g_y2
            y1 = y2
          ELSE
            y1 = .95
            g_y1 = 0.0_8
          END IF
          IF (.1 .LT. y1) THEN
            g_rh(i, k, j) = g_y1
            rh(i, k, j) = y1
          ELSE
            g_rh(i, k, j) = 0.0_8
            rh(i, k, j) = .1
          END IF
        END DO
      END DO
    END DO
    g_t8w = 0.0_8
    g_p8w = 0.0_8
    DO j=j_start,j_end
      DO k=2,k_end
        DO i=i_start,i_end
          g_p8w(i, k, j) = fzm(k)*g_p_phy(i, k, j) + fzp(k)*g_p_phy(i, k&
&            -1, j)
          p8w(i, k, j) = fzm(k)*p_phy(i, k, j) + fzp(k)*p_phy(i, k-1, j)
          g_t8w(i, k, j) = fzm(k)*g_t_phy(i, k, j) + fzp(k)*g_t_phy(i, k&
&            -1, j)
          t8w(i, k, j) = fzm(k)*t_phy(i, k, j) + fzp(k)*t_phy(i, k-1, j)
        END DO
      END DO
    END DO
    DO j=j_start,j_end
      DO i=i_start,i_end
        g_z0 = g_z_at_w(i, 1, j)
        z0 = z_at_w(i, 1, j)
        g_z1 = g_z(i, 1, j)
        z1 = z(i, 1, j)
        g_z2 = g_z(i, 2, j)
        z2 = z(i, 2, j)
        g_w1 = ((g_z0-g_z2)*(z1-z2)-(z0-z2)*(g_z1-g_z2))/(z1-z2)**2
        w1 = (z0-z2)/(z1-z2)
        g_w2 = -g_w1
        w2 = 1. - w1
        g_p8w(i, 1, j) = g_w1*p_phy(i, 1, j) + w1*g_p_phy(i, 1, j) + &
&          g_w2*p_phy(i, 2, j) + w2*g_p_phy(i, 2, j)
        p8w(i, 1, j) = w1*p_phy(i, 1, j) + w2*p_phy(i, 2, j)
        g_t8w(i, 1, j) = g_w1*t_phy(i, 1, j) + w1*g_t_phy(i, 1, j) + &
&          g_w2*t_phy(i, 2, j) + w2*g_t_phy(i, 2, j)
        t8w(i, 1, j) = w1*t_phy(i, 1, j) + w2*t_phy(i, 2, j)
        g_z0 = g_z_at_w(i, kte, j)
        z0 = z_at_w(i, kte, j)
        g_z1 = g_z(i, k_end, j)
        z1 = z(i, k_end, j)
        g_z2 = g_z(i, k_end-1, j)
        z2 = z(i, k_end-1, j)
        g_w1 = ((g_z0-g_z2)*(z1-z2)-(z0-z2)*(g_z1-g_z2))/(z1-z2)**2
        w1 = (z0-z2)/(z1-z2)
        g_w2 = -g_w1
        w2 = 1. - w1
        g_arg10 = g_w1*LOG(p_phy(i, kde-1, j)) + w1*g_p_phy(i, kde-1, j)&
&          /p_phy(i, kde-1, j) + g_w2*LOG(p_phy(i, kde-2, j)) + w2*&
&          g_p_phy(i, kde-2, j)/p_phy(i, kde-2, j)
        arg10 = w1*LOG(p_phy(i, kde-1, j)) + w2*LOG(p_phy(i, kde-2, j))
        g_p8w(i, kde, j) = g_arg10*EXP(arg10)
        p8w(i, kde, j) = EXP(arg10)
        g_t8w(i, kde, j) = g_w1*t_phy(i, kde-1, j) + w1*g_t_phy(i, kde-1&
&          , j) + g_w2*t_phy(i, kde-2, j) + w2*g_t_phy(i, kde-2, j)
        t8w(i, kde, j) = w1*t_phy(i, kde-1, j) + w2*t_phy(i, kde-2, j)
      END DO
    END DO
  END SUBROUTINE g_chem_prep
END MODULE g_module_chem_utilities
